# ==================================================
# Path: D:\CapSys-Smart-DTU-Capstone-Project-Management-main
# Detected tech: javascript, python, react, typescript
# ==================================================

## DIRECTORY STRUCTURE
```
CapSys-Smart-DTU-Capstone-Project-Management-main/
├── .git/
├── node_modules/
├── public/
│   └── vite.svg
├── src/
│   ├── app/
│   │   ├── README.md
│   │   └── instance.jsx
│   ├── assets/
│   │   ├── icon/
│   │   │   ├── .gitkeep
│   │   │   ├── Bell.png
│   │   │   ├── Bell.svg
│   │   │   ├── Calendar.svg
│   │   │   ├── Calendar_Event.svg
│   │   │   ├── Check_All-bottom.svg
│   │   │   ├── Check_All.svg
│   │   │   ├── Download.svg
│   │   │   ├── Frame 41 (1).png
│   │   │   ├── Frame 41 (2).png
│   │   │   ├── Frame 41 (3).png
│   │   │   ├── Frame 41 (4).png
│   │   │   ├── Group 4.png
│   │   │   ├── Menu_Alt_01.svg
│   │   │   ├── Notebook.svg
│   │   │   ├── Star.png
│   │   │   ├── Star.svg
│   │   │   └── StarBottom.svg
│   │   ├── image/
│   │   │   ├── .gitkeep
│   │   │   ├── confirm.png
│   │   │   ├── file.png
│   │   │   ├── hue.jpg
│   │   │   ├── time.png
│   │   │   └── what.png
│   │   └── logo/
│   │       ├── .gitkeep
│   │       ├── Frame41.png
│   │       ├── pngwing 1.png
│   │       └── pngwing 2.png
│   ├── components/
│   │   ├── common/
│   │   │   ├── Navbar.jsx
│   │   │   └── Navbar.scss
│   │   ├── data/
│   │   │   ├── Table.js
│   │   │   └── users.js
│   │   ├── domain/
│   │   │   └── StartCard.js
│   │   └── ui/
│   │       └── Button.js
│   ├── features/
│   │   ├── approvals/
│   │   │   └── .gitkeep
│   │   ├── grading/
│   │   │   └── .gitkeep
│   │   ├── proposals/
│   │   │   └── .gitkeep
│   │   ├── reports/
│   │   │   └── .gitkeep
│   │   └── schedules/
│   │       └── .gitkeep
│   ├── globalStyle/
│   │   └── global.css
│   ├── hooks/
│   │   └── useAuth.js
│   ├── layouts/
│   │   └── DashboardLayout.js
│   ├── pages/
│   │   ├── ForgotPassword/
│   │   │   ├── ConfirmForgot.jsx
│   │   │   ├── ForgotPassword.jsx
│   │   │   ├── ForgotPassword.scss
│   │   │   ├── VerificationCode.jsx
│   │   │   └── VerificationCode.scss
│   │   ├── Lecturers/
│   │   ├── Login/
│   │   │   ├── Login.jsx
│   │   │   └── Login.scss
│   │   └── admin/
│   │       ├── QuanLyDoAn/
│   │       │   ├── Action/
│   │       │   │   ├── UpdateAction.jsx
│   │       │   │   └── ViewAction.jsx
│   │       │   ├── QuanLyDoAn.jsx
│   │       │   └── QuanLyDoAn.scss
│   │       ├── TongQuan/
│   │       │   ├── TongQuan.jsx
│   │       │   └── TongQuan.scss
│   │       ├── AdminLayout.jsx
│   │       └── AdminLayout.scss
│   ├── services/
│   │   ├── AuthAPI.js
│   │   ├── LecturersAPI.js
│   │   ├── StudentsAPI.js
│   │   └── TeamsAPI.js
│   ├── store/
│   │   ├── authReducers.js
│   │   ├── authSlice.js
│   │   └── store.js
│   ├── App.jsx
│   └── main.jsx
├── .gitignore
├── eslint.config.js
├── index.html
├── package-lock.json
├── package.json
└── vite.config.js
```

## FILE CONTENTS

### eslint.config.js
```js
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])

```

### vite.config.js
```js
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import svgr from "@svgr/rollup";

export default defineConfig({
  plugins: [react(), svgr()],
});

```

### src\App.jsx
```jsx
import { Route, Router, Routes } from "react-router-dom";
import Login from "./pages/Login/Login";
import ForgotPassword from "./pages/ForgotPassword/ForgotPassword";
import VerificationCode from "./pages/ForgotPassword/VerificationCode";
import ConfirmForgot from "./pages/ForgotPassword/ConfirmForgot";
import AdminLayout from "./pages/admin/AdminLayout";
import TongQuan from "./pages/admin/TongQuan/TongQuan";
import QuanLyDoAn from "./pages/admin/QuanLyDoAn/QuanLyDoAn";

function App() {
  return (
    <Routes>
      <Route path="/" element={<Login />} />
      <Route path="/forgot-password" element={<ForgotPassword />} />
      <Route path="/admin" element={<AdminLayout />}>
        <Route index element={<TongQuan />} />
        <Route path="quan-ly-do-an" element={<QuanLyDoAn />} />
      </Route>
      {/* <Route path="/lecturer" element={<LecturersLayout />}></Route> */}
      <Route path="verification-code" element={<VerificationCode />} />
      <Route path="confirm-forgot" element={<ConfirmForgot />} />
      {/* <Route path="/admin" element={<AdminDashboard />} />
        <Route path="/lecturer" element={<LecturerDashboard />} />
        <Route path="/student" element={<StudentDashboard />} /> */}
      {/* sau này thêm ProtectedRoute để check role */}
    </Routes>
  );
}

export default App;

```

### src\main.jsx
```jsx
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import App from "./App.jsx";
import { Provider } from "react-redux";
import store from "./store/store.js";
import { BrowserRouter } from "react-router-dom";

createRoot(document.getElementById("root")).render(
  <StrictMode>
    <Provider store={store}>
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </Provider>
  </StrictMode>
);

```

### src\app\instance.jsx
```jsx
import axios from "axios";

const instance = axios.create({
  //mock API
  baseURL: "http://localhost:5295/api/", // hard-code luôn
});

instance.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("token");
    if (token) config.headers.Authorization = `Bearer ${token}`;
    return config;
  },
  (error) => Promise.reject(error) // nên có cho đủ cặp
);

export default instance;

```

### src\components\common\Navbar.jsx
```jsx
import React from "react";
import "./Navbar.scss";
import logoCap from "../../assets/logo/Frame41.png";
import anh from "../../assets/image/hue.jpg";
import { ReactComponent as Bell } from "../../assets/icon/Bell.svg";
import { ReactComponent as MenuIcon } from "../../assets/icon/Menu_Alt_01.svg";
import { ReactComponent as NotebookIcon } from "../../assets/icon/Notebook.svg";
import { ReactComponent as StarIcon } from "../../assets/icon/Star.svg";
import { ReactComponent as CalendarIcon } from "../../assets/icon/Calendar.svg";
import { ReactComponent as CheckIcon } from "../../assets/icon/Check_All.svg";
import { useNavigate } from "react-router-dom";
import { LogoutAPI } from "../../services/AuthAPI";

const Navbar = () => {
  const navigate = useNavigate();
  const handleLogout = async () => {
    localStorage.removeItem("token");
    localStorage.removeItem("refreshToken");

    try {
      // Gọi API logout nếu cần
      const response = await LogoutAPI();
      console.log("Logout successful:", response);
    } catch (error) {
      console.error("Logout failed:", error);
    } finally {
      // Chuyển hướng về trang login bất kể API có lỗi hay không
      navigate("/");
    }
  };
  return (
    <nav className="navbar">
      {/* Logo + Tên hệ thống */}
      <div className="nav-top">
        <div className="navbar__logo">
          <img src={logoCap} alt="logo" />
          <div className="logo-text">
            <span className="logo-text-top">Quản Lý Đồ Án Capstone</span>
            <span className="logo-text-bottom">
              Hệ thống quản lý đồ án tốt nghiệp
            </span>
          </div>
        </div>

        {/* User info */}
        <div className="navbar__user">
          <Bell className="notification" />
          <img className="avatar" src={anh} alt="avatar" />
          <div className="navbar__user-info">
            <span className="name">PGS. Trần Đức A</span>
            <span className="role">Trưởng khoa CNTT</span>
          </div>
        </div>
      </div>
      {/* Menu */}
      <div className="nav-bottom">
        <ul className="navbar__menu">
          <li onClick={() => navigate("")}>
            <MenuIcon className="menu-icon" />
            Tổng quan
          </li>
          <li onClick={() => navigate("quan-ly-do-an")}>
            <NotebookIcon className="menu-icon" />
            Quản lý đồ án
          </li>
          <li>
            <StarIcon className="menu-icon" />
            Chấm điểm
          </li>
          <li>
            <CalendarIcon className="menu-icon" />
            Lịch bảo vệ
          </li>
          <li>
            <CheckIcon className="menu-icon" />
            Phê duyệt
          </li>
          <li onClick={() => handleLogout()}>Logout</li>
        </ul>
      </div>
    </nav>
  );
};

export default Navbar;

```

### src\components\data\Table.js
```js

```

### src\components\data\users.js
```js
export const students = [
  {
    id: "SV001",
    name: "Nguyễn Văn A",
    email: "a@dtu.edu.vn",
    phone: "0905-111-222",
    dob: "2002-03-15",
    gender: "Nam",
    major: "Công nghệ thông tin",
    year: 4,
    gpa: 3.4,
    capstoneId: null, // id nhóm capstone nếu đã join
    capstoneRole: null, // Leader / Member
    advisorId: null, // id giảng viên hướng dẫn
    status: "active", // active / graduated / dropped
    joinDate: "2025-01-20", // ngày đăng ký capstone
    skills: ["React", "Node.js"], // mảng kỹ năng
    avatar: "/images/students/sv001.jpg",
    address: "Đà Nẵng, Việt Nam",
    role: "student",
    password: "123456", // chỉ dùng cho mock login
  },
  {
    id: "SV002",
    name: "Trần Thị B",
    email: "b@dtu.edu.vn",
    phone: "0912-333-444",
    dob: "2001-10-05",
    gender: "Nữ",
    major: "Trí tuệ nhân tạo",
    year: 4,
    gpa: 3.7,
    capstoneId: "CP02",
    capstoneRole: "Leader",
    advisorId: "GV001",
    status: "active",
    joinDate: "2025-01-25",
    skills: ["Python", "Machine Learning", "TensorFlow"],
    avatar: "/images/students/sv002.jpg",
    address: "Huế, Việt Nam",
    role: "student",
    password: "123456",
  },
  // thêm nhiều object khác nếu cần
];

export const lecturers = [
  {
    id: "GV001",
    name: "TS. Phạm Văn Hùng",
    email: "hung@dtu.edu.vn",
    phone: "0906-555-666",
    dept: "Công nghệ thông tin",
    position: "Trưởng bộ môn",
    specialization: ["Web Development", "Cloud Computing"],
    office: "Phòng 305, Tòa A",
    availableSlots: ["2025-09-20 09:00", "2025-09-21 14:00"], // slot họp/định hướng
    adviseeLimit: 5, // tối đa số nhóm được hướng dẫn
    currentAdvisees: ["CP02"],
    avatar: "/images/lecturers/gv001.jpg",
    bio: "20 năm kinh nghiệm phát triển phần mềm, từng làm việc tại Google Cloud.",
    role: "lecturer",
    password: "123456", // chỉ dùng cho mock login
  },
  {
    id: "GV002",
    name: "ThS. Lê Thị Lan",
    email: "lan@dtu.edu.vn",
    phone: "0987-777-888",
    dept: "Khoa Học Máy Tính",
    position: "Giảng viên",
    specialization: ["AI", "Deep Learning"],
    office: "Phòng 210, Tòa B",
    availableSlots: ["2025-09-22 10:00", "2025-09-23 15:00"],
    adviseeLimit: 3,
    currentAdvisees: [],
    avatar: "/images/lecturers/gv002.jpg",
    bio: "Chuyên nghiên cứu về AI, tham gia nhiều dự án quốc tế về Deep Learning.",
    role: "lecturer",
    password: "123456",
  },
];

export const users = [...students, ...lecturers];

```

### src\components\domain\StartCard.js
```js

```

### src\components\ui\Button.js
```js

```

### src\hooks\useAuth.js
```js

```

### src\layouts\DashboardLayout.js
```js

```

### src\pages\admin\AdminLayout.jsx
```jsx
import React, { useEffect } from "react";
import Navbar from "../../components/common/Navbar";
import { Outlet, useNavigate } from "react-router-dom";
import "./AdminLayout.scss";
import { jwtDecode } from "jwt-decode";

const AdminLayout = () => {
  const navigate = useNavigate();

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (!token) {
      navigate("/", { replace: true });
      return;
    }

    try {
      const decoded = jwtDecode(token);
      const now = Date.now() / 1000;

      if (!decoded.exp || decoded.exp < now) {
        localStorage.clear();
        navigate("/", { replace: true });
        return;
      }

      const role =
        decoded.AccountType ||
        decoded.accountType ||
        decoded["http://schemas.microsoft.com/ws/2008/06/identity/claims/role"];

      if (role !== "Admin") {
        navigate("/", { replace: true });
      }
    } catch (error) {
      console.error("Error decoding token:", error);
      localStorage.clear();
      navigate("/", { replace: true });
    }
  }, [navigate]);

  return (
    <div className="admin-page">
      {/* Navbar full width */}
      <header className="admin-navbar">
        <div className="navbar-inner">
          <Navbar />
        </div>
      </header>

      {/* Content giới hạn */}
      <main className="admin-container">
        <div className="admin-content">
          <Outlet />
        </div>
      </main>
    </div>
  );
};

export default AdminLayout;

```

### src\pages\admin\QuanLyDoAn\QuanLyDoAn.jsx
```jsx
import React, { useEffect, useState, useMemo, useCallback } from "react";
import "./QuanLyDoAn.scss";
import { getAllTeamsAPI } from "../../../services/TeamsAPI"; // API đã có sẵn
import {
  useReactTable,
  getCoreRowModel,
  getPaginationRowModel,
  flexRender,
} from "@tanstack/react-table";
import ViewAction from "./Action/ViewAction";
import UpdateAction from "./Action/UpdateAction";

const QuanLyDoAn = () => {
  // ---- State ----
  const [projects, setProjects] = useState([]); // Dữ liệu hiển thị trên bảng
  const [rawData, setRawData] = useState([]); // Dữ liệu thô từ API
  const [capstoneType, setCapstoneType] = useState("1"); // Mặc định là Capstone 1
  const [year, setYear] = useState("");
  const [semester, setSemester] = useState("");
  const [status, setStatus] = useState("");
  const [search, setSearch] = useState("");
  const [loading, setLoading] = useState(false);
  const [show, setShow] = useState(false);
  const [teamId, setTeamId] = useState(null);
  const [update, setUpdate] = useState(false);
  // ---- Fetch teams/projects ----
  const fetchProjects = useCallback(async () => {
    try {
      setLoading(true);
      console.log("Calling API with capstoneType:", capstoneType); // Debug: Giá trị capstoneType

      // Gọi API với capstoneType
      const apiCapstoneType = capstoneType ? Number(capstoneType) : undefined;
      const res = await getAllTeamsAPI(apiCapstoneType);
      console.log("API response:", res); // Debug: Dữ liệu API trả về
      console.log("API data:", res.data);

      let data = res.data || []; // Đảm bảo data là mảng
      console.log("Initial data count:", data.length); // Debug: Số lượng dữ liệu ban đầu

      // Lưu dữ liệu thô và hiển thị ngay lập tức
      setRawData(data);
      setProjects(data); // Hiển thị dữ liệu thô trước khi lọc
      console.log("Raw data set:", data.length); // Debug: Dữ liệu thô đã lưu
    } catch (err) {
      console.error("Fetch projects error:", err); // Debug: Lỗi API
      setRawData([]);
      setProjects([]);
    } finally {
      setLoading(false);
    }
  }, [capstoneType]);

  // ---- Áp dụng bộ lọc ----
  const applyFilters = useCallback(() => {
    let filteredData = [...rawData]; // Bắt đầu từ dữ liệu thô
    console.log("Applying filters on:", filteredData.length); // Debug: Số lượng trước khi lọc

    // Bộ lọc year
    if (year) {
      filteredData = filteredData.filter((t) => t.academicYear === year);
      console.log("After year filter:", filteredData.length); // Debug: Sau bộ lọc year
      setProjects([...filteredData]); // Cập nhật ngay sau bộ lọc year
    }

    // Bộ lọc semester
    if (semester) {
      filteredData = filteredData.filter(
        (t) => String(t.semester) === semester
      );
      console.log("After semester filter:", filteredData.length); // Debug: Sau bộ lọc semester
      setProjects([...filteredData]); // Cập nhật ngay sau bộ lọc semester
    }

    // Bộ lọc status
    if (status) {
      filteredData = filteredData.filter((t) => t.status === status);
      console.log("After status filter:", filteredData.length); // Debug: Sau bộ lọc status
      setProjects([...filteredData]); // Cập nhật ngay sau bộ lọc status
    }

    // Bộ lọc search
    if (search) {
      const s = search.toLowerCase();
      filteredData = filteredData.filter(
        (t) =>
          (t.projectTitle && t.projectTitle.toLowerCase().includes(s)) ||
          (t.teamName && t.teamName.toLowerCase().includes(s))
      );
      console.log("After search filter:", filteredData.length); // Debug: Sau bộ lọc search
      setProjects([...filteredData]); // Cập nhật ngay sau bộ lọc search
    }

    console.log("Final filtered data:", filteredData); // Debug: Dữ liệu cuối cùng
    setProjects(filteredData); // Cập nhật dữ liệu cuối cùng
  }, [rawData, year, semester, status, search]);

  // ---- useEffect cho fetch dữ liệu ----
  useEffect(() => {
    console.log("useEffect fetch triggered with capstoneType:", capstoneType); // Debug: Kiểm tra capstoneType
    fetchProjects();
  }, [capstoneType, fetchProjects]);

  // ---- useEffect cho bộ lọc ----
  useEffect(() => {
    console.log("useEffect filter triggered with:", {
      year,
      semester,
      status,
      search,
    }); // Debug: Kiểm tra các bộ lọc
    applyFilters();
  }, [year, semester, status, search, rawData, applyFilters]);

  // ---- Xử lý hành động ----
  const handleView = (teamId) => {
    setShow(true);
    setTeamId(teamId);
  };

  const handleUpdate = (teamId) => {
    setUpdate(true);
    setTeamId(teamId);
  };

  // ---- Cấu hình react-table ----
  const columns = useMemo(
    () => [
      {
        header: "Loại Capstone",
        accessorKey: "capstoneType",
        cell: (info) => `Capstone ${info.getValue()}`,
      },
      {
        header: "Đề tài",
        accessorKey: "projectTitle",
        cell: (info) => info.getValue() || "—",
      },
      {
        header: "Nhóm",
        accessorKey: "teamName",
      },
      {
        header: "Mentor",
        accessorKey: "mentorName",
        cell: (info) => info.getValue() || "Chưa có",
      },
      {
        header: "Trạng thái",
        accessorKey: "status",
        cell: (info) => {
          const value = info.getValue();
          return (
            <span className={`status-badge ${value?.toLowerCase()}`}>
              {value || "—"}
            </span>
          );
        },
      },
      {
        header: "Ngày bảo vệ",
        accessorKey: "defenseDate",
        cell: (info) => {
          const value = info.getValue();
          return value ? new Date(value).toLocaleDateString() : "—";
        },
      },
      {
        header: "Hành động",
        accessorKey: "teamId",
        cell: (info) => {
          const value = info.getValue();
          return (
            <div className="qlda-actions">
              <button onClick={() => handleView(value)}>Xem</button>
              <button onClick={() => handleUpdate(value)}>Sửa</button>
              <button onClick={() => alert(`Xóa ${value}`)}>Xóa</button>
            </div>
          );
        },
      },
    ],
    []
  );

  // Cấu hình react-table với phân trang
  const table = useReactTable({
    data: projects,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    initialState: {
      pagination: {
        pageIndex: 0,
        pageSize: 5,
      },
    },
  });

  const pageIndex = table.getState().pagination.pageIndex;
  const pageSize = table.getState().pagination.pageSize;
  const pageCount = table.getPageCount();
  const canPreviousPage = table.getCanPreviousPage();
  const canNextPage = table.getCanNextPage();

  // ---- Render ----
  return (
    <div className="quanlydoan-page">
      <header className="qlda-toolbar">
        {/* Lọc theo loại Capstone */}
        <select
          value={capstoneType}
          onChange={(e) => setCapstoneType(e.target.value)}
        >
          <option value="1">Capstone 1</option>
          <option value="2">Capstone 2</option>
        </select>

        <select value={year} onChange={(e) => setYear(e.target.value)}>
          <option value="">Tất cả năm</option>
          <option value="2024-2025">2024-2025</option>
          <option value="2025-2026">2025-2026</option>
        </select>

        <select value={semester} onChange={(e) => setSemester(e.target.value)}>
          <option value="">Tất cả học kỳ</option>
          <option value="1">HK1</option>
          <option value="2">HK2</option>
          <option value="3">Summer</option>
        </select>

        <select value={status} onChange={(e) => setStatus(e.target.value)}>
          <option value="">Tất cả trạng thái</option>
          <option value="Active">Đang thực hiện</option>
          <option value="Pending">Chờ duyệt</option>
          <option value="Completed">Hoàn thành</option>
          <option value="Defending">Sắp bảo vệ</option>
        </select>

        <input
          type="text"
          placeholder="Tìm đề tài / nhóm…"
          value={search}
          onChange={(e) => setSearch(e.target.value)}
        />

        <button onClick={fetchProjects}>Refresh</button>
      </header>

      {loading && <p>Đang tải dữ liệu...</p>}

      {!loading && (
        <div className="qlda-table-box">
          {/* Bảng react-table */}
          <table className="qlda-table">
            <thead>
              {table.getHeaderGroups().map((headerGroup) => (
                <tr key={headerGroup.id}>
                  {headerGroup.headers.map((header) => (
                    <th key={header.id}>
                      {header.isPlaceholder
                        ? null
                        : flexRender(
                            header.column.columnDef.header,
                            header.getContext()
                          )}
                    </th>
                  ))}
                </tr>
              ))}
            </thead>
            <tbody>
              {table.getRowModel().rows.length === 0 && (
                <tr>
                  <td colSpan="7" style={{ textAlign: "center" }}>
                    Không có dữ liệu
                  </td>
                </tr>
              )}
              {table.getRowModel().rows.map((row) => (
                <tr key={row.id}>
                  {row.getVisibleCells().map((cell) => (
                    <td key={cell.id}>
                      {flexRender(
                        cell.column.columnDef.cell,
                        cell.getContext()
                      )}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>

          <p>
            Hiển thị {projects.length} đề tài | Trang {pageIndex + 1} /{" "}
            {pageCount}
          </p>

          {/* Điều khiển phân trang */}
          <div className="pagination">
            <button
              onClick={() => table.setPageIndex(0)}
              disabled={!canPreviousPage}
            >
              {"<<"}
            </button>
            <button
              onClick={() => table.previousPage()}
              disabled={!canPreviousPage}
            >
              Trước
            </button>
            <button onClick={() => table.nextPage()} disabled={!canNextPage}>
              Sau
            </button>
            <button
              onClick={() => table.setPageIndex(pageCount - 1)}
              disabled={!canNextPage}
            >
              {">>"}
            </button>

            <select
              value={pageSize}
              onChange={(e) => table.setPageSize(Number(e.target.value))}
            >
              {[5, 10, 20, 30, 50].map((size) => (
                <option key={size} value={size}>
                  Hiển thị {size}
                </option>
              ))}
            </select>
          </div>
        </div>
      )}
      <ViewAction show={show} setShow={setShow} teamId={teamId} />
      <UpdateAction
        show={update}
        setShow={setUpdate}
        teamId={teamId}
        onUpdated={fetchProjects}
      />
    </div>
  );
};

export default QuanLyDoAn;

```

### src\pages\admin\QuanLyDoAn\Action\UpdateAction.jsx
```jsx
import React, { useEffect, useState } from "react";
import { Modal, Button, Form } from "react-bootstrap";
import { getTeamByIdAPI, updateTeamAPI } from "../../../../services/TeamsAPI";

const UpdateAction = ({ show, setShow, teamId, onUpdated }) => {
  const [formData, setFormData] = useState({
    teamName: "",
    projectTitle: "",
    teamLeaderId: "",
    mentorId: "",
    status: "",
  });
  const [loading, setLoading] = useState(false);

  // Lấy dữ liệu nhóm để fill vào form
  useEffect(() => {
    const fetchTeam = async () => {
      if (teamId && show) {
        const response = await getTeamByIdAPI(teamId);
        setFormData({
          teamName: response.data.teamName || "",
          projectTitle: response.data.projectTitle || "",
          teamLeaderId: response.data.teamLeaderId || "",
          mentorId: response.data.mentorId || "",
          status: response.data.status || "",
        });
      }
    };
    fetchTeam();
  }, [teamId, show]);

  // Cập nhật state form khi nhập
  const handleChange = (e) => {
    setFormData((prev) => ({
      ...prev,
      [e.target.name]: e.target.value,
    }));
  };

  const handleSubmit = async () => {
    try {
      setLoading(true);
      await updateTeamAPI(
        teamId,
        formData.teamName,
        formData.projectTitle,
        formData.teamLeaderId,
        formData.mentorId,
        formData.status
      );
      alert("Cập nhật thành công!");
      setShow(false);
      if (onUpdated) onUpdated(); // gọi lại để refresh list
    } catch (error) {
      alert("Cập nhật thất bại: " + error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Modal show={show} onHide={() => setShow(false)} size="lg" centered>
      <Modal.Header closeButton>
        <Modal.Title>Cập nhật nhóm</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <Form>
          <Form.Group className="mb-3">
            <Form.Label>Tên nhóm</Form.Label>
            <Form.Control
              type="text"
              name="teamName"
              value={formData.teamName}
              onChange={handleChange}
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Đề tài</Form.Label>
            <Form.Control
              type="text"
              name="projectTitle"
              value={formData.projectTitle}
              onChange={handleChange}
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Leader (ID)</Form.Label>
            <Form.Control
              type="text"
              name="teamLeaderId"
              value={formData.teamLeaderId}
              onChange={handleChange}
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Mentor (ID)</Form.Label>
            <Form.Control
              type="text"
              name="mentorId"
              value={formData.mentorId}
              onChange={handleChange}
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Trạng thái</Form.Label>
            <Form.Select
              name="status"
              value={formData.status}
              onChange={handleChange}
            >
              <option value="">Chọn trạng thái</option>
              <option value="Active">Đang thực hiện</option>
              <option value="Pending">Chờ duyệt</option>
              <option value="Completed">Hoàn thành</option>
              <option value="Defending">Sắp bảo vệ</option>
            </Form.Select>
          </Form.Group>
        </Form>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="secondary" onClick={() => setShow(false)}>
          Hủy
        </Button>
        <Button variant="primary" onClick={handleSubmit} disabled={loading}>
          {loading ? "Đang lưu..." : "Lưu thay đổi"}
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default UpdateAction;

```

### src\pages\admin\QuanLyDoAn\Action\ViewAction.jsx
```jsx
import React, { useEffect, useState } from "react";
import { Modal, Button, Table, Badge } from "react-bootstrap";
import { getTeamByIdAPI } from "../../../../services/TeamsAPI";
import "bootstrap/dist/css/bootstrap.min.css";

const ViewAction = ({ show, setShow, teamId }) => {
  const [team, setTeam] = useState(null);

  useEffect(() => {
    const fetchTeam = async () => {
      if (teamId) {
        const response = await getTeamByIdAPI(teamId);
        setTeam(response.data);
      }
    };
    fetchTeam();
  }, [teamId]);

  const handleClose = () => setShow(false);

  return (
    <Modal show={show} onHide={handleClose} size="lg" centered>
      <Modal.Header closeButton>
        <Modal.Title>
          Nhóm: <span className="text-primary">{team?.teamName}</span>
        </Modal.Title>
      </Modal.Header>
      <Modal.Body>
        {/* Thông tin tổng quan */}
        <div className="mb-3">
          <p>
            <b>Mã nhóm:</b> {team?.teamId || "—"}
          </p>
          <p>
            <b>Loại Capstone:</b>{" "}
            <Badge bg="info">
              {team?.capstoneType ? `Capstone ${team.capstoneType}` : "Chưa rõ"}
            </Badge>
          </p>
          <p>
            <b>Đề tài:</b> {team?.projectTitle || "Chưa có"}
          </p>
          <p>
            <b>Trạng thái:</b>{" "}
            <Badge
              bg={
                team?.status === "Active"
                  ? "success"
                  : team?.status === "Completed"
                  ? "secondary"
                  : "warning"
              }
            >
              {team?.status}
            </Badge>
          </p>
          <p>
            <b>Mentor:</b> {team?.mentorName || "Chưa có"}
          </p>
          <p>
            <b>Leader:</b> {team?.teamLeaderName}
          </p>
          <p>
            <b>Ngày tạo:</b>{" "}
            {team?.createdDate
              ? new Date(team.createdDate).toLocaleString()
              : "—"}
          </p>
        </div>

        <hr />

        {/* Danh sách sinh viên */}
        <h5 className="mb-3">Danh sách thành viên</h5>
        <Table striped bordered hover size="sm">
          <thead>
            <tr>
              <th>MSSV</th>
              <th>Họ tên</th>
              <th>Khoa</th>
              <th>Chuyên ngành</th>
              <th>GPA</th>
              <th>Email</th>
            </tr>
          </thead>
          <tbody>
            {team?.students?.map((s) => (
              <tr key={s.studentId}>
                <td>{s.studentCode}</td>
                <td>{s.fullName}</td>
                <td>{s.faculty}</td>
                <td>{s.major}</td>
                <td>{s.gpa}</td>
                <td>{s.email}</td>
              </tr>
            ))}
          </tbody>
        </Table>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="secondary" onClick={handleClose}>
          Đóng
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default ViewAction;

```

### src\pages\admin\TongQuan\TongQuan.jsx
```jsx
import React, { useEffect, useState } from "react";
import "./TongQuan.scss";
import file from "../../../assets/image/file.png";
// import confirm from "../../../assets/image/confirm.png";
import time from "../../../assets/image/time.png";
import what from "../../../assets/image/what.png";
import { getAllLecturersAPI } from "../../../services/LecturersAPI";
import { getAllStudentsAPI } from "../../../services/StudentsAPI";
import { getAllTeamsAPI } from "../../../services/TeamsAPI";
const TongQuan = () => {
  const [totalLecturers, setTotalLecturers] = useState(0);
  const [totalStudents, setTotalStudents] = useState(0);
  const [totalTeamsCap1, setTotalTeamsCap1] = useState(0);
  const [totalTeamsCap2, setTotalTeamsCap2] = useState(0);
  const [totalTeamsCap1WithMentor, setTotalTeamsCap1WithMentor] = useState(0);
  const [totalTeamsCap2WithMentor, setTotalTeamsCap2WithMentor] = useState(0);
  // Viết hàm lấy dữ liệu
  const getTotalTeamsCap1 = async () => {
    try {
      const response = await getAllTeamsAPI(1);
      setTotalTeamsCap1(response.data.length);
    } catch (error) {
      console.error(error);
    }
  };
  const getTotalTeamsCap1WithMentor = async () => {
    try {
      const response = await getAllTeamsAPI(1);
      setTotalTeamsCap1WithMentor(response.data.length);
    } catch (error) {
      console.error(error);
    }
  };
  const getTotalTeamsCap2WithMentor = async () => {
    try {
      const response = await getAllTeamsAPI(2);
      setTotalTeamsCap2WithMentor(response.data.length);
    } catch (error) {
      console.error(error);
    }
  };
  const getTotalTeamsCap2 = async () => {
    try {
      const response = await getAllTeamsAPI(2);
      setTotalTeamsCap2(response.data.length);
    } catch (error) {
      console.error(error);
    }
  };
  const getTotalStudents = async () => {
    try {
      const response = await getAllStudentsAPI();
      setTotalStudents(response.data.length);
    } catch (error) {
      console.error(error);
    }
  };

  const getTotalLecturers = async () => {
    try {
      const response = await getAllLecturersAPI();
      setTotalLecturers(response.data.length);
    } catch (error) {
      console.error(error);
    }
  };

  // Gọi 1 lần khi component mount
  useEffect(() => {
    getTotalLecturers();
    getTotalStudents();
    getTotalTeamsCap1();
    getTotalTeamsCap2();
    getTotalTeamsCap1WithMentor();
    getTotalTeamsCap2WithMentor();
  }, []);

  return (
    <div className="tongquan-page">
      <div className="tq-stats">
        <div className="tq-stat-card">
          <div className="tq-icon">
            <img src={what} alt="students" />
          </div>
          <div className="tq-info">
            <div className="tq-stat-title">Tổng sinh viên</div>
            <div className="tq-stat-value">{totalStudents}</div>
            {/* <div className="tq-stat-sub">demo data</div> */}
          </div>
        </div>

        <div className="tq-stat-card">
          <div className="tq-icon">
            <img src={time} alt="teams" />
          </div>
          <div className="tq-info">
            <div className="tq-stat-title">Tổng nhóm (Cap1)</div>
            <div className="tq-stat-value">{totalTeamsCap1}</div>
            <div className="tq-stat-sub">
              {totalTeamsCap1WithMentor} có mentor ·{" "}
              {totalTeamsCap1 - totalTeamsCap1WithMentor} chưa
            </div>
          </div>
        </div>
        <div className="tq-stat-card">
          <div className="tq-icon">
            <img src={file} alt="teams" />
          </div>
          <div className="tq-info">
            <div className="tq-stat-title">Tổng nhóm (Cap2)</div>
            <div className="tq-stat-value">{totalTeamsCap2}</div>
            <div className="tq-stat-sub">
              {totalTeamsCap2WithMentor} có mentor ·{" "}
              {totalTeamsCap2 - totalTeamsCap2WithMentor} chưa
            </div>
          </div>
        </div>

        <div className="tq-stat-card">
          <div className="tq-icon">
            <img src={what} alt="mentors" />
          </div>
          <div className="tq-info">
            <div className="tq-stat-title">Giảng viên</div>
            <div className="tq-stat-value">{totalLecturers}</div>
            {/* <div className="tq-stat-sub">Mentors tracked</div> */}
          </div>
        </div>
      </div>
    </div>
  );
};

export default TongQuan;

```

### src\pages\ForgotPassword\ConfirmForgot.jsx
```jsx
import React from "react";
import "./ForgotPassword.scss";
import iconReturn from "../../assets/icon/Group 4.png";
import { useNavigate } from "react-router-dom";

const ConfirmForgot = () => {
  const navigate = useNavigate();

  const handleBack = () => {
    // Navigate back to login (e.g., using React Router or parent component)
    navigate("/verification-code");
  };

  return (
    <div className="forgot-password-container">
      <div className="forgot-password-content">
        <button className="back-button" onClick={handleBack}>
          <div className="back-icon">
            <img src={iconReturn} alt="" />
          </div>
        </button>

        <h2>Password reset</h2>
        <p>
          Your password has been successfully reset. click confirm to set a new
          password
        </p>
        <button
          type="submit"
          className="reset-button"
          onClick={() => navigate("/")}
        >
          Confirm
        </button>
      </div>
    </div>
  );
};

export default ConfirmForgot;

```

### src\pages\ForgotPassword\ForgotPassword.jsx
```jsx
import React, { useState } from "react";
import "./ForgotPassword.scss";
import iconReturn from "../../assets/icon/Group 4.png";
import { useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import {
  forgetPassword,
  selectAuthLoading,
  selectAuthError,
} from "../../store/authSlice";
const ForgotPassword = () => {
  const [email, setEmail] = useState("");
  const [error, setError] = useState("");
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const loading = useSelector(selectAuthLoading);
  const authError = useSelector(selectAuthError);

  const validateEmail = (val) => {
    // Regex cải thiện: cho phép ký tự đặc biệt, kiểm tra độ dài
    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

    // Kiểm tra độ dài tổng thể
    if (val.length > 254) return false;

    // Kiểm tra local part không bắt đầu/kết thúc bằng dấu chấm
    const localPart = val.split("@")[0];
    if (localPart.startsWith(".") || localPart.endsWith(".")) return false;

    return emailRegex.test(val);
  };

  const handleResetPassword = async (e) => {
    e.preventDefault();

    if (!email) return setError("Please enter your email");

    if (!validateEmail(email))
      return setError("Please enter a valid email address");
    setError("");
    dispatch(forgetPassword({ email }))
      .unwrap()
      .then(() => {
        navigate(`/verification-code?email=${encodeURIComponent(email)}`);
      });
  };

  const handleBack = () => {
    // Navigate back to login (e.g., using React Router or parent component)
    navigate("/");
  };

  return (
    <div className="forgot-password-container">
      <div className="forgot-password-content">
        <button className="back-button" onClick={handleBack}>
          <div className="back-icon">
            <img src={iconReturn} alt="" />
          </div>
        </button>

        <h2>Forgot password</h2>
        <p>Please enter your email to reset the password</p>
        <form onSubmit={handleResetPassword}>
          <div className="form-group">
            <label htmlFor="email">Your Email</label>
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="Enter your email"
              className={error ? "error" : ""}
            />
            {error && <span className="error-message">{error}</span>}
            {!error && authError && (
              <span className="error-message">{authError}</span>
            )}
          </div>
          <button type="submit" className="reset-button" disabled={loading}>
            {loading ? (
              <div className="spinner-reset-button"></div>
            ) : (
              "Reset Password"
            )}
          </button>
        </form>
      </div>
    </div>
  );
};

export default ForgotPassword;

```

### src\pages\ForgotPassword\VerificationCode.jsx
```jsx
import React, { useState, useEffect } from "react";
import "./VerificationCode.scss";
import iconReturn from "../../assets/icon/Group 4.png";
import { useNavigate, useLocation } from "react-router-dom";
// import { resetPasswordAPI } from "../../services/AuthAPI";
import { useDispatch, useSelector } from "react-redux";
import {
  resetPassword,
  // selectAuthError,
  selectAuthLoading,
} from "../../store/authSlice";

const VerificationCode = () => {
  // Các state phải khai báo TRƯỚC các hàm sử dụng chúng
  const [email, setEmail] = useState("");
  const [resetCode, setResetCode] = useState(""); // Đảm bảo dòng này có mặt!
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [error, setError] = useState("");
  // const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const location = useLocation();
  const dispatch = useDispatch();
  const loading = useSelector(selectAuthLoading);
  // const authError = useSelector(selectAuthError);

  // Lấy email từ URL params khi component mount
  useEffect(() => {
    const urlParams = new URLSearchParams(location.search);
    const emailFromUrl = urlParams.get("email");
    if (emailFromUrl) {
      setEmail(decodeURIComponent(emailFromUrl));
    }
  }, [location.search]);

  // === Handle submit ===
  const handleResetPassword = async (e) => {
    e.preventDefault();

    // Trim để tránh space thừa
    const trimmedEmail = email.trim();
    const trimmedResetCode = resetCode.trim();
    const trimmedNewPassword = newPassword.trim();
    const trimmedConfirmPassword = confirmPassword.trim();

    // Validate
    if (
      !trimmedEmail ||
      !trimmedResetCode ||
      !trimmedNewPassword ||
      !trimmedConfirmPassword
    ) {
      setError("Vui lòng nhập đầy đủ thông tin");
      return;
    }
    if (!/^\d{6}$/.test(trimmedResetCode)) {
      setError("Mã xác minh phải gồm đúng 6 số");
      return;
    }
    if (trimmedNewPassword.length < 6) {
      // Thêm validate độ dài password (tùy chọn)
      setError("Mật khẩu mới phải ít nhất 6 ký tự");
      return;
    }
    if (trimmedNewPassword !== trimmedConfirmPassword) {
      setError("Mật khẩu xác nhận không khớp");
      return;
    }

    setError("");
    // setLoading(true);

    try {
      // Gọi API với các biến đã trim
      dispatch(
        resetPassword({
          email: trimmedEmail,
          resetCode: trimmedResetCode,
          newPassword: trimmedNewPassword,
          confirmPassword: trimmedConfirmPassword,
        })
      )
        .unwrap()
        .then(() => {
          navigate("/confirm-forgot");
        });
    } catch (err) {
      console.error("Lỗi API:", err); // Log để debug
      setError(err.message || "Không thể kết nối tới server");
    } finally {
      // setError("Mật khẩu mới phải khác mật khẩu trước đó");
    }
  };

  // Hàm xử lý change cho resetCode (tùy chọn: chỉ cho phép số)
  const handleResetCodeChange = (e) => {
    const value = e.target.value.replace(/\D/g, ""); // Chỉ giữ số
    setResetCode(value);
  };

  return (
    <div className="reset-password-container">
      <div className="reset-password-content">
        <button
          className="back-button"
          onClick={() => navigate("/forgot-password")}
        >
          <img src={iconReturn} alt="back" />
        </button>

        <h2>Reset Password</h2>
        <p>Nhập email, mã xác minh 6 số và mật khẩu mới</p>

        <form onSubmit={handleResetPassword}>
          <div className="form-group">
            {/* <label>Email</label> */}
            <input
              type="email"
              placeholder="you@example.com"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className={error && !email.trim() ? "error" : ""}
              disabled={true}
              autoComplete="off"
              autoCorrect="off"
              autoCapitalize="off"
              spellCheck="false"
            />
          </div>

          <div className="form-group">
            <input
              type="text"
              placeholder="Nhập mã"
              value={resetCode}
              maxLength={6}
              onChange={handleResetCodeChange} // Sử dụng hàm mới để chỉ cho phép số
              className={
                error && (!resetCode || !/^\d{6}$/.test(resetCode))
                  ? "error"
                  : ""
              }
              autoComplete="off"
              autoCorrect="off"
              autoCapitalize="off"
              spellCheck="false"
            />
          </div>

          <div className="form-group">
            <input
              type="password"
              placeholder="Nhập mật khẩu mới"
              value={newPassword}
              onChange={(e) => setNewPassword(e.target.value)}
              className={
                error && newPassword !== confirmPassword ? "error" : ""
              }
              autoComplete="new-password"
              autoCorrect="off"
              autoCapitalize="off"
              spellCheck="false"
            />
          </div>

          <div className="form-group">
            <input
              type="password"
              placeholder="Xác nhận mật khẩu"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              className={
                error && newPassword !== confirmPassword ? "error" : ""
              }
              autoComplete="new-password"
              autoCorrect="off"
              autoCapitalize="off"
              spellCheck="false"
            />
          </div>

          {error && <p className="error-message">{error}</p>}

          <button type="submit" className="reset-button" disabled={loading}>
            {loading ? "Đang xử lý..." : "Đổi mật khẩu"}
          </button>
        </form>
      </div>
    </div>
  );
};

export default VerificationCode;

```

### src\pages\Login\Login.jsx
```jsx
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import "./Login.scss";
import { useDispatch, useSelector } from "react-redux";
import {
  login,
  selectAuthLoading,
  selectAuthError,
} from "../../store/authSlice";

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [emailError, setEmailError] = useState("");
  const [passwordError, setPasswordError] = useState("");

  const navigate = useNavigate();
  const dispatch = useDispatch();
  const loading = useSelector(selectAuthLoading);
  const authError = useSelector(selectAuthError);
  const validateEmail = (val) => {
    // Regex cải thiện: cho phép ký tự đặc biệt, kiểm tra độ dài
    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

    // Kiểm tra độ dài tổng thể
    if (val.length > 254) return false;

    // Kiểm tra local part không bắt đầu/kết thúc bằng dấu chấm
    const localPart = val.split("@")[0];
    if (localPart.startsWith(".") || localPart.endsWith(".")) return false;

    return emailRegex.test(val);
  };

  const handleLoginSubmit = async (e) => {
    e.preventDefault();
    setEmailError("");
    setPasswordError("");

    if (!validateEmail(email)) {
      setEmailError("Email format is invalid");
      return;
    }
    if (!password) {
      setPasswordError("Password cannot be empty");
      return;
    }

    dispatch(login({ email, password }))
      .unwrap()
      .then((data) => {
        const type = data.account?.accountType;
        switch (type) {
          case "Admin":
            navigate("/admin");
            break;
          case "Lecturer":
            navigate("/lecturer");
            break;
          case "Student":
            navigate("/student");
            break;
          default:
            navigate("/");
        }
      })
      .catch((err) => {
        setPasswordError(err || "Login failed");
      });
  };

  const handleForgotPassword = () => navigate("/forgot-password");

  return (
    <div className="login-page">
      <div className="login-container">
        <h2 className="login-title">CAPSY SMART DTU</h2>

        <form className="login-form" onSubmit={handleLoginSubmit}>
          <div className="form-group">
            <label htmlFor="email">Your Email</label>
            <input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="contact@disdtech.com"
              className={emailError ? "error" : ""}
            />
            {emailError && <span className="error-message">{emailError}</span>}
          </div>

          <div className="form-group">
            <label htmlFor="password">Password</label>
            <input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className={passwordError ? "error" : ""}
            />
            {passwordError && (
              <span className="error-message">{passwordError}</span>
            )}
            {!passwordError && authError && (
              <span className="error-message">{authError}</span>
            )}

            <button
              type="button"
              className="forgot-password"
              onClick={handleForgotPassword}
            >
              Forgot password?
            </button>
          </div>

          <button type="submit" className="continue-button" disabled={loading}>
            {loading ? "Đang đăng nhập..." : "Continue"}
          </button>
        </form>
      </div>
    </div>
  );
};

export default Login;

```

### src\services\AuthAPI.js
```js
import instance from "../app/instance";

const LoginAPI = async (email, password) => {
  try {
    const response = await instance.post("Auth/login", { email, password });
    return response.data;
  } catch (error) {
    if (error.response) {
      // Server trả về lỗi (4xx, 5xx)
      throw new Error(error.response.data.message || "Server Error");
    } else if (error.request) {
      // Request đã gửi nhưng không nhận được response
      throw new Error("No response from server");
    } else {
      // Lỗi khác
      throw new Error(error.message);
    }
  }
};

const LogoutAPI = async () => {
  try {
    const response = await instance.post("Auth/logout");
    return response.data;
  } catch (error) {
    throw new Error(
      error.response?.data?.message || error.request
        ? "Không nhận được phản hồi từ server"
        : error.message
    );
  }
};

const forgetPasswordAPI = async (email) => {
  try {
    const response = await instance.post("Auth/forget-password", { email });
    return response.data;
  } catch (error) {
    throw new Error(
      error.response?.data?.message || error.request
        ? "Không nhận được phản hồi từ server"
        : error.message
    );
  }
};

const resetPasswordAPI = async (
  email,
  resetCode,
  newPassword,
  confirmPassword
) => {
  try {
    const response = await instance.post("/Auth/reset-password", {
      // Đường dẫn API đúng theo backend
      email,
      resetCode,
      newPassword,
      confirmPassword, // Backend có thể không cần confirmPassword nếu đã validate frontend
    });
    return response.data;
  } catch (error) {
    // Cải thiện error handling
    if (error.response) {
      // Server trả lỗi (4xx, 5xx)
      throw new Error(error.response.data?.message || "Lỗi từ server");
    } else if (error.request) {
      // Không nhận phản hồi
      throw new Error("Không nhận được phản hồi từ server");
    } else {
      // Lỗi khác
      throw new Error(error.message || "Có lỗi xảy ra");
    }
  }
};

export { LoginAPI, LogoutAPI, forgetPasswordAPI, resetPasswordAPI };

```

### src\services\LecturersAPI.js
```js
import instance from "../app/instance";

const getAllLecturersAPI = async () => {
  try {
    const response = await instance.get("/Lecturers/get-lecturers");
    return response.data;
  } catch (error) {
    throw new Error(error.response.data.message || "Server Error");
  }
};

export { getAllLecturersAPI };

```

### src\services\StudentsAPI.js
```js
import instance from "../app/instance";

const getAllStudentsAPI = async () => {
  try {
    const response = await instance.get("/Students/get-students");
    return response.data;
  } catch (error) {
    throw new Error(error.response.data.message || "Server Error");
  }
};
const deleteStudentAPI = async (id) => {
  try {
    const response = await instance.delete(`/Students/delete-student/${id}`);
    return response.data;
  } catch (error) {
    throw new Error(error.response.data.message || "Server Error");
  }
};
export { getAllStudentsAPI, deleteStudentAPI };

```

### src\services\TeamsAPI.js
```js
import instance from "../app/instance";

const getAllTeamsAPI = async (capstoneType) => {
  try {
    const response = await instance.get(
      `Teams/by-capstone-type/${capstoneType}`
    );
    return response.data;
  } catch (error) {
    throw new Error(error.response.data.message || "Server Error");
  }
};

// get team by id
const getTeamByIdAPI = async (teamId) => {
  try {
    const response = await instance.get(`Teams/${teamId}`);
    return response.data;
  } catch (error) {
    throw new Error(error.response.data.message || "Server Error");
  }
};

// update team
const updateTeamAPI = async (
  teamId,
  teamName,
  projectTitle,
  teamLeaderId,
  mentorId,
  status
) => {
  try {
    const response = await instance.put(`Teams/update/${teamId}`, {
      teamName,
      projectTitle,
      teamLeaderId,
      mentorId,
      status,
    });

    // Check từ backend
    if (response.data.success != true) {
      throw new Error(response.data.message || "Update failed");
    }

    return response.data;
  } catch (error) {
    console.error("Update team error:", error);

    const msg =
      error.response?.data?.message || error.message || "Server Error";

    throw new Error(msg);
  }
};

export { getAllTeamsAPI, getTeamByIdAPI, updateTeamAPI };

```

### src\store\authReducers.js
```js
import { login, logoutAsync, forgetPassword, resetPassword } from "./authSlice";

export const extraReducers = (builder) => {
  builder
    // case login
    .addCase(login.pending, (state) => {
      state.loading = true;
      state.error = null;
    })
    .addCase(login.fulfilled, (state, action) => {
      state.loading = false;
      state.error = null;
      state.token = action.payload.token;
      state.refreshToken = action.payload.refreshToken;
      state.accountType = action.payload.account?.accountType ?? null;
      state.account = action.payload.account ?? null;
      localStorage.setItem("token", action.payload.token);
      localStorage.setItem("refreshToken", action.payload.refreshToken);
      if (action.payload.account?.accountType) {
        localStorage.setItem("accountType", action.payload.account.accountType);
      }
    })
    .addCase(login.rejected, (state, action) => {
      state.loading = false;
      state.error = action.payload || "Login failed";
    })
    // case logout
    .addCase(logoutAsync.pending, (state) => {
      state.loading = true;
      state.error = null;
    })
    .addCase(logoutAsync.fulfilled, (state) => {
      state.loading = false;
      state.user = null;
      state.token = null;
      state.refreshToken = null;
      state.accountType = null;
      localStorage.removeItem("token");
      localStorage.removeItem("refreshToken");
      localStorage.removeItem("accountType");
    })
    .addCase(logoutAsync.rejected, (state, action) => {
      state.loading = false;
      state.error = action.payload || "Logout failed";
    })
    // case forgetPassword
    .addCase(forgetPassword.pending, (state) => {
      state.loading = true;
      state.error = null;
    })
    .addCase(forgetPassword.fulfilled, (state) => {
      state.loading = false;
      state.error = null;
    })
    .addCase(forgetPassword.rejected, (state, action) => {
      state.loading = false;
      state.error = action.payload || "ForgetPassword failed";
    })
    // case resetPassword
    .addCase(resetPassword.pending, (state) => {
      state.loading = true;
      state.error = null;
    })
    .addCase(resetPassword.fulfilled, (state) => {
      state.loading = false;
      state.error = null;
    })
    .addCase(resetPassword.rejected, (state, action) => {
      state.loading = false;
      state.error = action.payload || "ResetPassword failed";
    });
};

```

### src\store\authSlice.js
```js
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  forgetPasswordAPI,
  LoginAPI,
  LogoutAPI,
  resetPasswordAPI,
} from "../services/AuthAPI";
import { extraReducers } from "./authReducers";

export const login = createAsyncThunk(
  "auth/login",
  async ({ email, password }, { rejectWithValue }) => {
    try {
      const data = await LoginAPI(email, password);
      return data;
    } catch (error) {
      return rejectWithValue(error.message || "Login failed");
    }
  }
);

export const logoutAsync = createAsyncThunk(
  "auth/logout",
  async (_, { rejectWithValue }) => {
    try {
      await LogoutAPI();
      return true;
    } catch (error) {
      return rejectWithValue(error.message || "Logout failed");
    }
  }
);

export const forgetPassword = createAsyncThunk(
  "auth/forgetPassword",
  async ({ email }, { rejectWithValue }) => {
    try {
      await forgetPasswordAPI(email);
      return true;
    } catch (error) {
      return rejectWithValue(error.message || "ForgetPassword failed");
    }
  }
);

export const resetPassword = createAsyncThunk(
  "auth/resetPassword",
  async (
    { email, resetCode, newPassword, confirmPassword },
    { rejectWithValue }
  ) => {
    try {
      await resetPasswordAPI(email, resetCode, newPassword, confirmPassword);
      return true;
    } catch (error) {
      return rejectWithValue(error.message || "ResetPassword failed");
    }
  }
);

const initialState = {
  user: null,
  token: null,
  refreshToken: null,
  accountType: null,
  loading: false,
  error: null,
};

const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    logout(state) {
      state.user = null;
      state.token = null;
      state.refreshToken = null;
      state.accountType = null;
      state.error = null;
      localStorage.removeItem("token");
      localStorage.removeItem("refreshToken");
      localStorage.removeItem("accountType");
    },
    restoreSession(state) {
      const token = localStorage.getItem("token");
      const refreshToken = localStorage.getItem("refreshToken");
      const accountType = localStorage.getItem("accountType");
      if (token) {
        state.token = token;
      }
      if (refreshToken) {
        state.refreshToken = refreshToken;
      }
      if (accountType) {
        state.accountType = accountType;
      }
    },
  },
  extraReducers: extraReducers,
});

export const { logout, restoreSession } = authSlice.actions;

export const selectAuth = (state) => state.auth;
export const selectAuthLoading = (state) => state.auth.loading;
export const selectAuthError = (state) => state.auth.error;
export const selectAuthToken = (state) => state.auth.token;
export const selectAccountType = (state) => state.auth.accountType;
export const selectCurrentUser = (state) => state.auth.user;

export default authSlice.reducer;

```

### src\store\store.js
```js
import { configureStore } from "@reduxjs/toolkit";
import authReducer from "./authSlice";

export const store = configureStore({
  reducer: {
    auth: authReducer,
  },
});

export default store;

```
