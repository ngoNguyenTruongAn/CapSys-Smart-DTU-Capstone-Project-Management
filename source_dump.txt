# ==================================================
# Path: D:\CapSys-Smart-DTU-Capstone-Project-Management-main
# Detected tech: javascript, python, react, typescript
# ==================================================

## DIRECTORY STRUCTURE
```
CapSys-Smart-DTU-Capstone-Project-Management-main/
├── .git/
├── node_modules/
├── public/
│   └── vite.svg
├── src/
│   ├── app/
│   │   ├── README.md
│   │   └── instance.jsx
│   ├── assets/
│   │   ├── icon/
│   │   │   ├── .gitkeep
│   │   │   ├── Bell.png
│   │   │   ├── Bell.svg
│   │   │   ├── Calendar.svg
│   │   │   ├── Calendar_Event.svg
│   │   │   ├── Check_All-bottom.svg
│   │   │   ├── Check_All.svg
│   │   │   ├── Download.svg
│   │   │   ├── Frame 41 (1).png
│   │   │   ├── Frame 41 (2).png
│   │   │   ├── Frame 41 (3).png
│   │   │   ├── Frame 41 (4).png
│   │   │   ├── Group 4.png
│   │   │   ├── Menu_Alt_01.svg
│   │   │   ├── Notebook.svg
│   │   │   ├── Star.png
│   │   │   ├── Star.svg
│   │   │   └── StarBottom.svg
│   │   ├── image/
│   │   │   ├── .gitkeep
│   │   │   ├── confirm.png
│   │   │   ├── file.png
│   │   │   ├── hue.jpg
│   │   │   ├── time.png
│   │   │   └── what.png
│   │   └── logo/
│   │       ├── .gitkeep
│   │       ├── Frame41.png
│   │       ├── pngwing 1.png
│   │       └── pngwing 2.png
│   ├── components/
│   │   ├── common/
│   │   │   ├── Navbar.jsx
│   │   │   └── Navbar.scss
│   │   ├── data/
│   │   │   └── Table.js
│   │   ├── domain/
│   │   │   └── StartCard.js
│   │   ├── examples/
│   │   └── ui/
│   │       └── Button.js
│   ├── features/
│   │   ├── grading/
│   │   │   └── .gitkeep
│   │   ├── proposals/
│   │   │   ├── layout-proposal-common/
│   │   │   │   ├── Button/
│   │   │   │   │   ├── Addbutton.jsx
│   │   │   │   │   ├── ApprovedButton.jsx
│   │   │   │   │   ├── DeleteButton.jsx
│   │   │   │   │   ├── EditButton.jsx
│   │   │   │   │   ├── RejectButton.jsx
│   │   │   │   │   └── ViewDetailButton.jsx
│   │   │   │   ├── Modal/
│   │   │   │   │   ├── AddProposalModal.jsx
│   │   │   │   │   └── AddProposalModal.module.scss
│   │   │   │   └── Header.jsx
│   │   │   ├── proposal-detail-UI/
│   │   │   │   ├── CardDetails.jsx
│   │   │   │   ├── Header-Detail.jsx
│   │   │   │   ├── Proposal-detail.jsx
│   │   │   │   ├── Proposal-details-list.jsx
│   │   │   │   └── ProposalDetails.module.scss
│   │   │   ├── proposals-logic/
│   │   │   │   ├── ProposalSearch-logic.jsx
│   │   │   │   ├── status.utils.js
│   │   │   │   ├── useGoBack.jsx
│   │   │   │   ├── useProposalTabs.jsx
│   │   │   │   └── useProposalsStore.jsx
│   │   │   ├── proposals-management-UI/
│   │   │   │   ├── HeaderManagement.jsx
│   │   │   │   ├── Proposal.module.scss
│   │   │   │   ├── ProposalCard.jsx
│   │   │   │   ├── ProposalList.jsx
│   │   │   │   ├── ProposalSearch.jsx
│   │   │   │   └── ProposalTabs.jsx
│   │   │   ├── .gitkeep
│   │   │   └── proposals-data.jsx
│   │   ├── reports/
│   │   │   └── .gitkeep
│   │   └── schedules/
│   │       └── .gitkeep
│   ├── globalStyle/
│   │   └── global.css
│   ├── hooks/
│   │   └── useAuth.js
│   ├── layouts/
│   │   └── DashboardLayout.js
│   ├── pages/
│   │   ├── ForgotPassword/
│   │   │   ├── ConfirmForgot.jsx
│   │   │   ├── ForgotPassword.jsx
│   │   │   ├── ForgotPassword.scss
│   │   │   ├── VerificationCode.jsx
│   │   │   └── VerificationCode.scss
│   │   ├── Lecturers/
│   │   ├── Login/
│   │   │   ├── Login.jsx
│   │   │   └── Login.scss
│   │   └── admin/
│   │       ├── QuanLyDoAn/
│   │       │   ├── Action/
│   │       │   │   ├── UpdateAction.jsx
│   │       │   │   └── ViewAction.jsx
│   │       │   ├── QuanLyDoAn.jsx
│   │       │   └── QuanLyDoAn.scss
│   │       ├── QuanLyTaiKhoan/
│   │       │   ├── RegisterStudent/
│   │       │   │   └── RegisterStudent.jsx
│   │       │   ├── QuanLyTaiKhoan.jsx
│   │       │   └── QuanLyTaiKhoan.scss
│   │       ├── TongQuan/
│   │       │   ├── TongQuan.jsx
│   │       │   └── TongQuan.scss
│   │       ├── AdminLayout.jsx
│   │       ├── AdminLayout.scss
│   │       └── Proposals.jsx
│   ├── services/
│   │   ├── AuthAPI.js
│   │   ├── LecturersAPI.js
│   │   ├── StudentsAPI.js
│   │   └── TeamsAPI.js
│   ├── store/
│   │   ├── authReducers.js
│   │   ├── authSlice.js
│   │   ├── store.js
│   │   └── studentSlice.js
│   ├── styles/
│   │   └── variables.scss
│   ├── App.jsx
│   └── main.jsx
├── .env
├── .gitignore
├── eslint.config.js
├── index.html
├── package-lock.json
├── package.json
└── vite.config.js
```

## FILE CONTENTS

### eslint.config.js
```js
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])

```

### vite.config.js
```js
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import svgr from "@svgr/rollup";

export default defineConfig({
  plugins: [react(), svgr()],
});

```

### src\App.jsx
```jsx
import { Route, Routes } from "react-router-dom";
import Login from "./pages/Login/Login";
import ForgotPassword from "./pages/ForgotPassword/ForgotPassword";
import VerificationCode from "./pages/ForgotPassword/VerificationCode";
import ConfirmForgot from "./pages/ForgotPassword/ConfirmForgot";
import AdminLayout from "./pages/admin/AdminLayout";
import TongQuan from "./pages/admin/TongQuan/TongQuan";
import QuanLyDoAn from "./pages/admin/QuanLyDoAn/QuanLyDoAn";
import QuanLyTaiKhoan from "./pages/admin/QuanLyTaiKhoan/QuanLyTaiKhoan";

import Proposals from "./pages/admin/Proposals";
import Proposaldetail from "./features/proposals/proposal-detail-UI/Proposal-detail";

function App() {
  return (
    <Routes>
      <Route path="/" element={<Login />} />
      <Route path="/forgot-password" element={<ForgotPassword />} />

      <Route path="/admin" element={<AdminLayout />}>
        <Route index element={<TongQuan />} />
        <Route path="quan-ly-do-an" element={<QuanLyDoAn />} />
        <Route path="quan-ly-tai-khoan" element={<QuanLyTaiKhoan />} />
      </Route>

      <Route path="verification-code" element={<VerificationCode />} />
      <Route path="confirm-forgot" element={<ConfirmForgot />} />
      <Route path="/proposals" element={<Proposals />} />
      <Route path="/proposal-detail/:id" element={<Proposaldetail />} />
    </Routes>
  );
}

export default App;

```

### src\main.jsx
```jsx
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import App from "./App.jsx";
import { Provider } from "react-redux";
import store from "./store/store.js";
import { BrowserRouter } from "react-router-dom";

createRoot(document.getElementById("root")).render(
  <StrictMode>
    <Provider store={store}>
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </Provider>
  </StrictMode>
);

```

### src\app\instance.jsx
```jsx
import axios from "axios";
import { refreshTokenAPI } from "../services/AuthAPI";

const instance = axios.create({
  baseURL: "http://localhost:5295/api/",
});

// Tránh gọi refresh nhiều lần cùng lúc
let isRefreshing = false;
let refreshSubscribers = [];

function onRefreshed(newToken) {
  refreshSubscribers.forEach((cb) => cb(newToken));
  refreshSubscribers = [];
}

instance.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // Nếu bị 401 và chưa retry
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      if (!isRefreshing) {
        isRefreshing = true;
        try {
          const token = localStorage.getItem("token");
          const refreshToken = localStorage.getItem("refreshToken");

          const data = await refreshTokenAPI({ token, refreshToken });

          // ✅ Lưu lại token và refreshToken mới
          localStorage.setItem("token", data.token);
          localStorage.setItem("refreshToken", data.refreshToken);

          // Gắn token mới vào header mặc định
          instance.defaults.headers.common[
            "Authorization"
          ] = `Bearer ${data.token}`;

          isRefreshing = false;
          onRefreshed(data.token);
        } catch (err) {
          isRefreshing = false;
          // refresh cũng fail → logout
          localStorage.clear();
          window.location.href = "/";
          return Promise.reject(err);
        }
      }

      // Hàng đợi chờ token mới
      return new Promise((resolve) => {
        refreshSubscribers.push((newToken) => {
          originalRequest.headers["Authorization"] = `Bearer ${newToken}`;
          resolve(instance(originalRequest));
        });
      });
    }

    return Promise.reject(error);
  }
);

export default instance;

```

### src\components\common\Navbar.jsx
```jsx
import React from "react";
import "./Navbar.scss";
import logoCap from "../../assets/logo/Frame41.png";
import anh from "../../assets/image/hue.jpg";
import { ReactComponent as Bell } from "../../assets/icon/Bell.svg";
import { ReactComponent as MenuIcon } from "../../assets/icon/Menu_Alt_01.svg";
import { ReactComponent as NotebookIcon } from "../../assets/icon/Notebook.svg";
import { ReactComponent as StarIcon } from "../../assets/icon/Star.svg";
import { ReactComponent as CalendarIcon } from "../../assets/icon/Calendar.svg";
import { ReactComponent as CheckIcon } from "../../assets/icon/Check_All.svg";
import { useNavigate } from "react-router-dom";
import { LogoutAPI } from "../../services/AuthAPI";

const Navbar = () => {
  const navigate = useNavigate();
  const handleLogout = async () => {
    localStorage.removeItem("token");
    localStorage.removeItem("refreshToken");

    try {
      // Gọi API logout nếu cần
      const response = await LogoutAPI();
      console.log("Logout successful:", response);
    } catch (error) {
      console.error("Logout failed:", error);
    } finally {
      // Chuyển hướng về trang login bất kể API có lỗi hay không
      navigate("/");
    }
  };
  return (
    <nav className="navbar">
      {/* Logo + Tên hệ thống */}
      <div className="nav-top">
        <div className="navbar__logo">
          <img src={logoCap} alt="logo" />
          <div className="logo-text">
            <span className="logo-text-top">Quản Lý Đồ Án Capstone</span>
            <span className="logo-text-bottom">
              Hệ thống quản lý đồ án tốt nghiệp
            </span>
          </div>
        </div>

        {/* User info */}
        <div className="navbar__user">
          <Bell className="notification" />
          <img className="avatar" src={anh} alt="avatar" />
          <div className="navbar__user-info">
            <span className="name">PGS. Trần Đức A</span>
            <span className="role">Trưởng khoa CNTT</span>
          </div>
        </div>
      </div>
      {/* Menu */}
      <div className="nav-bottom">
        <ul className="navbar__menu">
          <li onClick={() => navigate("")}>
            <MenuIcon className="menu-icon" />
            Tổng quan
          </li>
          <li onClick={() => navigate("quan-ly-do-an")}>
            <NotebookIcon className="menu-icon" />
            Quản lý đồ án
          </li>
          <li onClick={() => navigate("quan-ly-tai-khoan")}>
            <StarIcon className="menu-icon" />
            Quản lý tài khoản
          </li>
          <li onClick={() => navigate("/proposals")}>
            <StarIcon className="menu-icon" />
            Quản lý Proposals
          </li>
          <li>
            <StarIcon className="menu-icon" />
            Chấm điểm
          </li>
          <li>
            <CalendarIcon className="menu-icon" />
            Lịch bảo vệ
          </li>
          <li>
            <CheckIcon className="menu-icon" />
            Phê duyệt
          </li>
          <li onClick={() => handleLogout()}>Logout</li>
        </ul>
      </div>
    </nav>
  );
};

export default Navbar;

```

### src\components\data\Table.js
```js

```

### src\components\domain\StartCard.js
```js

```

### src\components\ui\Button.js
```js

```

### src\features\proposals\proposals-data.jsx
```jsx
// Đây là data tạm, sau này bạn thay API vào chỗ này
const proposals = [
  {
    id: "DA001",
    title: "Hệ thống quản lý thư viện",
    summary:
      "Xây dựng hệ thống quản lý thư viện với các chức năng mượn trả sách, quản lý độc giả, thống kê báo cáo.",
    mentor: "Võ Đình Hiếu",
    members: ["Ngô Nguyễn Trường An"],
    registerDate: "15/2/2025",
    approveDate: "28/2/2025",
    status: "Đã Duyệt",
    // TRƯỜNG MỚI: Mục tiêu
    goals: [
      "Xây dựng giao diện người dùng thân thiện và reponsive.",
      "Tích hợp hệ thống quản lý mượn trả tự động.",
      "Phân quyền truy cập cho thủ thư và độc giả.",
      "Cung cấp chức năng tìm kiếm nâng cao.",
    ],
    // TRƯỜNG MỚI: Công nghệ
    technologies: ["ReactJS", "Node.js & Express", "MongoDB", "SCSS"],
  },
  {
    id: "DA002",
    title: "Ứng dụng quản lý chi tiêu cá nhân",
    summary:
      "Ứng dụng cho phép quản lý chi tiêu hằng ngày, theo dõi ngân sách và tạo báo cáo tài chính cá nhân.",
    mentor: "Nguyễn Văn A",
    members: ["Trần Văn B", "Lê Văn E"],
    registerDate: "20/2/2025",
    approveDate: "Chưa duyệt",
    status: "Chờ Được Duyệt",
    // TRƯỜNG MỚI: Mục tiêu
    goals: [
      "Thiết lập giao diện di động trực quan cho việc nhập liệu chi tiêu.",
      "Xây dựng cơ chế nhắc nhở thanh toán hóa đơn tự động.",
      "Phân tích dữ liệu chi tiêu theo danh mục.",
    ],
    // TRƯỜNG MỚI: Công nghệ
    technologies: [
      "React Native",
      "Firebase Realtime Database",
      "Redux/Zustand",
    ],
  },
  {
    id: "DA003",
    title: "Website bán sách online",
    summary:
      "Phát triển website thương mại điện tử chuyên về sách, tích hợp giỏ hàng và thanh toán trực tuyến.",
    mentor: "Trần Thị C",
    members: ["Ngô Minh D"],
    registerDate: "10/2/2025",
    approveDate: "Từ chối",
    status: "Bị Từ Chối",
    // TRƯỜNG MỚI: Mục tiêu
    goals: [
      "Tạo trang sản phẩm chi tiết với đánh giá của người dùng.",
      "Tối ưu hóa tốc độ tải trang (SEO/Performance).",
      "Kết nối API thanh toán VNPAY hoặc MoMo.",
    ],
    // TRƯỜNG MỚI: Công nghệ
    technologies: ["Next.js", "Strapi CMS", "PostgreSQL", "Tailwind CSS"],
  },
  {
    id: "DA004",
    title: "Hệ thống học trực tuyến (E-learning)",
    summary:
      "Xây dựng nền tảng cung cấp các khóa học online, có chức năng quản lý bài giảng và tiến độ học tập.",
    mentor: "Trần Thị C",
    members: ["Ngô Minh A", "Đỗ Thị B"],
    registerDate: "10/2/2025",
    approveDate: "Từ chối",
    status: "Bị Từ Chối",
    // TRƯỜNG MỚI: Mục tiêu
    goals: [
      "Tạo môi trường học tập tương tác (bình luận, hỏi đáp trực tiếp).",
      "Theo dõi tiến độ học tập của từng học viên.",
      "Tích hợp chức năng thi và cấp chứng chỉ.",
    ],
    // TRƯỜNG MỚI: Công nghệ
    technologies: ["Vue.js", "Python (Django)", "Docker"],
  },
  {
    id: "DA005",
    title: "Nền tảng mạng xã hội thu nhỏ",
    summary:
      "Xây dựng một mạng xã hội đơn giản cho cộng đồng sinh viên trong trường.",
    mentor: "Trần Thị C",
    members: ["Phạm Văn X", "Nguyễn Thị Y"],
    registerDate: "10/2/2025",
    approveDate: "Từ chối",
    status: "Bị Từ Chối",
    // TRƯỜNG MỚI: Mục tiêu
    goals: [
      "Cho phép người dùng đăng bài và tương tác (thích, bình luận).",
      "Tạo chức năng kết bạn và nhắn tin cơ bản.",
      "Đảm bảo tốc độ xử lý nhanh cho các thao tác cơ bản.",
    ],
    // TRƯỜNG MỚI: Công nghệ
    technologies: ["Svelte", "Go (Golang)", "Redis Cache"],
  },
];

export default proposals;

```

### src\features\proposals\layout-proposal-common\Header.jsx
```jsx

import { faArrowLeft } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import styles from '../proposals-management-UI/Proposal.module.scss'
import useGoBack from "../proposals-logic/useGoBack";

function Header({ heading, subheading, rightContent}) {
  const goBack = useGoBack();
    return (
    <div className={styles['header-wrapper']}>
    <div className={styles['header-left-content']}>
      <div className={styles['header-icon']}
       onClick={goBack} 
       role="button" 
       tabIndex={0} 
       aria-label="Quay lại trang trước" 
      
      >
   
    <FontAwesomeIcon icon ={faArrowLeft} />
    </div>
    <div className={styles['header-content']}>
   
    <h1 className={styles['header-head-text']}>{heading}</h1>
    <p className={styles['header-text']}>{subheading}</p>
    </div>
    </div>
    <div className={styles['header-right-content']}>
    
    {rightContent}
    </div>
    
    </div>
      );
}

export default Header;
```

### src\features\proposals\layout-proposal-common\Button\Addbutton.jsx
```jsx
import { faPlus } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import styles from "../../proposals-management-UI/Proposal.module.scss";

function AddButton({ onClick }) {
  return (
    <button
      type="button"
      onClick={onClick}
      className={styles["addButton-wrapper"]}
    >
      <span className={styles["addButton-icon"]}>
        <FontAwesomeIcon icon={faPlus} />
      </span>
      <p className={styles["addButton-text"]}>Thêm đồ án mới</p>
    </button>
  );
}
export default AddButton;

```

### src\features\proposals\layout-proposal-common\Button\ApprovedButton.jsx
```jsx
// src/layout-proposal-common/Button/ApprovedButton.jsx (Đổi tên thành ProposalActionButton)
import styles from "../../proposal-detail-UI/ProposalDetails.module.scss";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faCheckCircle } from "@fortawesome/free-solid-svg-icons";

/**
 * Component nút hành động Duyệt đề tài.
 * @param {function} onClick - Hàm xử lý khi click
 * @param {boolean} disabled - Trạng thái disabled
 */
function ProposalActionButton({ onClick, disabled = false }) {
    return (
        <button 
            className={styles['approvedButton-wrapper']}
            onClick={onClick}
            disabled={disabled}
        >
            <span className={styles['approvedButton-icon']}>
                <FontAwesomeIcon icon={faCheckCircle} />
            </span>
            <p className={styles['approvedButton-text']}>Duyệt</p>
        </button>
    );
}

export default ProposalActionButton;
```

### src\features\proposals\layout-proposal-common\Button\DeleteButton.jsx
```jsx
import styles from "../../proposal-detail-UI/ProposalDetails.module.scss";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faTrash } from "@fortawesome/free-solid-svg-icons";

// Bổ sung props onClick, disabled
function DeleteButton({ onClick, disabled }) {
    return ( 
        <button 
            className={styles['deleteButton-wrapper']}
            onClick={onClick}
            disabled={disabled}
        >
         <span className={styles['deleteButton-icon']}>
        <FontAwesomeIcon icon={faTrash} />
        </span>
        <p className={styles['deleteButton-text']}>Xóa</p>
        </button>
     );
}

export default DeleteButton;
```

### src\features\proposals\layout-proposal-common\Button\EditButton.jsx
```jsx
import styles from "../../proposal-detail-UI/ProposalDetails.module.scss";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faPen } from "@fortawesome/free-solid-svg-icons";

// Bổ sung props onClick, disabled, text
function EditButton({ onClick, disabled, text }) {
    return (
        <button 
            className={styles['editButton-wrapper']}
            onClick={onClick}
            disabled={disabled}
        >
        <span className={styles['editButton-icon']}>
        <FontAwesomeIcon icon={faPen} />
        </span>
        <p className={styles['editButton-text']}>{text || "Chỉnh sửa"}</p>
        </button>
    );
}

export default EditButton;
```

### src\features\proposals\layout-proposal-common\Button\RejectButton.jsx
```jsx
import styles from "../../proposal-detail-UI/ProposalDetails.module.scss";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faTrash } from "@fortawesome/free-solid-svg-icons";

// Bổ sung props onClick, disabled (giống DeleteButton)
function RejectButton({ onClick, disabled }) {
    return ( 
        <button 
            className={styles['deleteButton-wrapper']}  // Giữ nguyên class để giống giao diện nút Xóa
            onClick={onClick}
            disabled={disabled}
        >
         <span className={styles['deleteButton-icon']}>
        <FontAwesomeIcon icon={faTrash} />  
        </span>
        <p className={styles['deleteButton-text']}>Từ chối</p> 
        </button>
     );
}

export default RejectButton;
```

### src\features\proposals\layout-proposal-common\Button\ViewDetailButton.jsx
```jsx

import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faEye } from "@fortawesome/free-regular-svg-icons";
import { Link } from "react-router-dom"; // Import Link từ react-router-dom
import styles from '../../proposals-management-UI/Proposal.module.scss'


function ViewDetailButton({ id }) {
  return (
    <Link to={`/proposal-detail/${id}`} className={styles["Card-button"]}>
      <span className={styles["Card-button-icon"]}>
        <FontAwesomeIcon icon={faEye} />
      </span>
      <p className={styles["Card-button-text"]}>Xem Chi Tiết</p>
    </Link>
  );
}

export default ViewDetailButton;
```

### src\features\proposals\layout-proposal-common\Modal\AddProposalModal.jsx
```jsx
import React, { useState } from "react";
import styles from "./AddProposalModal.module.scss";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faPlus, faTrash } from "@fortawesome/free-solid-svg-icons";
import { useProposalsStore } from "../../proposals-logic/useProposalsStore";

export default function AddProposalModal() {
  const { isModalOpen, closeModal, addProposal, isLoading } = useProposalsStore();

  // dữ liệu form
  const [id, setId] = useState("");
  const [title, setTitle] = useState("");
  const [mentor, setMentor] = useState("");
  const [summary, setSummary] = useState("");
  const [members, setMembers] = useState([{ name: "", mssv: "" }]);
  const [goals, setGoals] = useState([""]);
  const [technologies, setTechnologies] = useState([""]);
  const [teamId, setTeamId] = useState("");
  const [files, setFiles] = useState([]);

  if (!isModalOpen) return null;

  const addRow = (setter, empty) => setter((p) => [...p, empty]);
  const removeRow = (setter, i) =>
    setter((p) => (p.length > 1 ? p.filter((_, idx) => idx !== i) : p));
  const handleMemberChange = (i, k, v) =>
    setMembers((p) => {
      const n = [...p];
      n[i] = { ...n[i], [k]: v };
      return n;
    });
  const handleArrChange = (setter, i, v) =>
    setter((p) => {
      const n = [...p];
      n[i] = v;
      return n;
    });

  const reset = () => {
    setId("");
    setTitle("");
    setMentor("");
    setSummary("");
    setMembers([{ name: "", mssv: "" }]);
    setGoals([""]);
    setTechnologies([""]);
    setTeamId("");
    setFiles([]);
  };

  const submit = async (e) => {
    e.preventDefault();

    const trimmedMembers = members
      .map((m) => ({ name: m.name.trim(), mssv: m.mssv.trim() }))
      .filter((m) => m.name);

    const fd = new FormData();
    fd.append("Title", title.trim());
    fd.append("MentorName", mentor.trim());
    fd.append("TeamId", teamId.trim());      // ⬅ Team ID
    fd.append("Description", summary.trim()); // ⬅ Mô tả
    fd.append("Summary", summary.trim());     // ⬅ giữ thêm key Summary

    trimmedMembers.forEach((m, idx) => {
      fd.append(`TeamMembers[${idx}].FullName`, m.name);
      if (m.mssv) fd.append(`TeamMembers[${idx}].StudentCode`, m.mssv);
    });

    goals
      .map((g) => g.trim())
      .filter(Boolean)
      .forEach((g, i) => fd.append(`Goals[${i}]`, g));

    technologies
      .map((t) => t.trim())
      .filter(Boolean)
      .forEach((t, i) => fd.append(`Technologies[${i}]`, t));

    (files || []).forEach((f) => fd.append("PdfFile", f));

    const ok = await addProposal(fd);
    if (ok) {
      reset();
      closeModal();
    }
  };

  return (
    <div className={styles.overlay} onClick={closeModal}>
      <div className={styles.modal} onClick={(e) => e.stopPropagation()}>
        <div className={styles.header}>
          <h3>Tạo đồ án mới</h3>
        </div>

        <form className={styles.body} onSubmit={submit}>
          {/* ✅ Team ID được đưa lên đầu */}
          <div className={styles.row}>
            <p className={styles.label}>Team ID</p>
            <input
              placeholder="VD: 12"
              value={teamId}
              onChange={(e) => setTeamId(e.target.value)}
            />
          </div>

          <div className={styles.row}>
            <p className={styles.label}>Mã đồ án</p>
            <input
              placeholder="VD: DA001"
              value={id}
              onChange={(e) => setId(e.target.value)}
            />
          </div>

          <div className={styles.row}>
            <p className={styles.label}>Tiêu đề đồ án</p>
            <input
              placeholder="VD: Hệ thống quản lý thư viện"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
            />
          </div>

          <div className={styles.row}>
            <p className={styles.label}>GVHD</p>
            <input
              placeholder="VD: Võ Đình Hiếu"
              value={mentor}
              onChange={(e) => setMentor(e.target.value)}
            />
          </div>

          {/* Mô tả đề tài */}
          <div className={styles.row}>
            <p className={styles.label}>Mô tả đề tài</p>
            <textarea
              placeholder="Mô tả / tóm tắt ngắn gọn"
              value={summary}
              onChange={(e) => setSummary(e.target.value)}
              rows={4}
            />
          </div>

          <div className={styles.group}>
            <div className={styles.groupHeader}>
              <p className={styles.label}>Thành viên nhóm</p>
              <button
                type="button"
                className={styles.addBtn}
                onClick={() => addRow(setMembers, { name: "", mssv: "" })}
              >
                <FontAwesomeIcon icon={faPlus} className={styles.addIcon} />
                Thêm thành viên
              </button>
            </div>
            {members.map((m, i) => (
              <div key={i} className={styles.memberRow}>
                <input
                  placeholder="Tên thành viên"
                  value={m.name}
                  onChange={(e) =>
                    handleMemberChange(i, "name", e.target.value)
                  }
                />
                <input
                  placeholder="MSSV"
                  value={m.mssv}
                  onChange={(e) =>
                    handleMemberChange(i, "mssv", e.target.value)
                  }
                />
                <button
                  type="button"
                  className={styles.removeBtn}
                  onClick={() => removeRow(setMembers, i)}
                >
                  <FontAwesomeIcon
                    icon={faTrash}
                    className={styles.removeIcon}
                  />
                </button>
              </div>
            ))}
          </div>

          <div className={styles.group}>
            <div className={styles.groupHeader}>
              <p className={styles.label}>Mục tiêu thực hiện</p>
              <button
                type="button"
                className={styles.addBtn}
                onClick={() => addRow(setGoals, "")}
              >
                <FontAwesomeIcon icon={faPlus} className={styles.addIcon} />
                Thêm mục tiêu
              </button>
            </div>
            {goals.map((g, i) => (
              <div key={i} className={styles.lineRow}>
                <input
                  placeholder={`Mục tiêu ${i + 1}`}
                  value={g}
                  onChange={(e) => handleArrChange(setGoals, i, e.target.value)}
                />
                <button
                  type="button"
                  className={styles.removeBtn}
                  onClick={() => removeRow(setGoals, i)}
                >
                  <FontAwesomeIcon
                    icon={faTrash}
                    className={styles.removeIcon}
                  />
                </button>
              </div>
            ))}
          </div>

          <div className={styles.group}>
            <div className={styles.groupHeader}>
              <p className={styles.label}>Công nghệ sử dụng</p>
              <button
                type="button"
                className={styles.addBtn}
                onClick={() => addRow(setTechnologies, "")}
              >
                <FontAwesomeIcon icon={faPlus} className={styles.addIcon} />
                Thêm công nghệ
              </button>
            </div>
            {technologies.map((t, i) => (
              <div key={i} className={styles.lineRow}>
                <input
                  placeholder="VD: React.js"
                  value={t}
                  onChange={(e) =>
                    handleArrChange(setTechnologies, i, e.target.value)
                  }
                />
                <button
                  type="button"
                  className={styles.removeBtn}
                  onClick={() => removeRow(setTechnologies, i)}
                >
                  <FontAwesomeIcon
                    icon={faTrash}
                    className={styles.removeIcon}
                  />
                </button>
              </div>
            ))}
          </div>

          <div className={styles.rowCol}>
            <p className={styles.label}>Tài liệu đính kèm</p>

            <label className={styles.uploadBox}>
              <input
                type="file"
                multiple
                onChange={(e) => setFiles(Array.from(e.target.files || []))}
                className={styles.hiddenInput}
                accept="application/pdf"
              />
              <div className={styles.uploadContent}>
                <FontAwesomeIcon icon={faPlus} className={styles.uploadIcon} />
                <p>Chọn tệp để tải lên </p>
                <span>Chỉ hỗ trợ PDF (tối đa 10MB)</span>
              </div>
            </label>

            {files.length > 0 && (
              <div className={styles.files}>
                {files.map((f, i) => (
                  <span key={i}>{f.name}</span>
                ))}
              </div>
            )}
          </div>

          <div className={styles.footer}>
            <button
              type="button"
              className={styles.cancel}
              onClick={closeModal}
              disabled={isLoading}
            >
              Hủy
            </button>
            <button type="submit" className={styles.create} disabled={isLoading}>
              {isLoading ? "Đang tạo..." : "Tạo đồ án"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

```

### src\features\proposals\proposal-detail-UI\CardDetails.jsx
```jsx
import styles from "./ProposalDetails.module.scss";
import { getStatusKey, getStatusLabel } from "../proposals-logic/status.utils";

// Cập nhật props: nhận selectedProposalId và setSelectedProposalId
function CardDetails({ proposal, selectedProposalId, setSelectedProposalId }) {
  const { id, title, mentor, registerDate, approveDate, status } = proposal;

  const key = getStatusKey(status);
  const statusLabel = getStatusLabel(key);
  const badgeClass = styles["status-" + key];

  // Logic: Kiểm tra nếu ID hiện tại khớp với ID đang được chọn thì set active
  const isActive = id === selectedProposalId;
  
  const handleClick = () => {
    // 1. Cập nhật ID được chọn khi click
    setSelectedProposalId(id); 

    // 2. THÊM LOGIC CUỘN VỀ ĐẦU TRANG
    if (typeof window !== 'undefined') {
        window.scrollTo({ 
            top: 0, // Cuộn về vị trí 0 (đầu trang)
            behavior: 'smooth' // Tạo hiệu ứng cuộn mượt
        });
        
        // Hoặc, nếu bạn chỉ muốn cuộn về đầu phần nội dung chính bên phải:
        // Bạn cần đặt một ref (tham chiếu) vào phần nội dung bên phải trong Proposal-detail.jsx 
        // và truyền nó xuống, hoặc sử dụng ID của phần tử đó (ít được khuyến khích hơn).
        
        // Giữ lại cách cuộn toàn bộ window là đơn giản và hiệu quả nhất trong trường hợp này.
    }
  };

  return (
    <div
      className={`${styles["DetailsCard-wrapper"]} ${
        isActive ? styles["Card-active"] : ""
      }`}
      onClick={handleClick} // Thêm onClick handler
    >
      <div className={styles["DetailsCard-header"]}>
        <span className={styles["DetailsCard-id"]}>{id}</span>
        <span className={`${styles["DetailsCard-status"]} ${badgeClass}`}>
          {statusLabel}
        </span>
      </div>

      <h3 className={styles["DetailsCard-title"]}>{title}</h3>
      <p className={styles["DetailsCard-mentor"]}>GVHD: {mentor}</p>
      <p className={styles["DetailsCard-date"]}>Ngày đăng ký: {registerDate}</p>
      <p className={styles["DetailsCard-date"]}>Ngày duyệt: {approveDate}</p>
    </div>
  );
}

export default CardDetails;
```

### src\features\proposals\proposal-detail-UI\Header-Detail.jsx
```jsx
import Header from "../layout-proposal-common/Header";

function HeaderDetail() {
    return ( 
      <div>
        <Header  
        heading="Chi tiết đồ án"
        subheading="Xem chi tiết và quản lí đồ án">

        </Header>
      </div>
     );
}

export default HeaderDetail;
```

### src\features\proposals\proposal-detail-UI\Proposal-detail.jsx
```jsx
// src/features/proposals/proposals-detail-UI/Proposal-detail.jsx
import HeaderDetail from "./Header-Detail";
import styles from "./ProposalDetails.module.scss";
import ProposalSearch from "../proposals-management-UI/ProposalSearch";
import CardDetailsList from "./Proposal-details-list";
import { useProposalsStore } from "../proposals-logic/useProposalsStore";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faFile } from "@fortawesome/free-regular-svg-icons";
import { faDownload } from "@fortawesome/free-solid-svg-icons";

import DeleteButton from "../layout-proposal-common/Button/DeleteButton";
import ApprovedButton from "../layout-proposal-common/Button/ApprovedButton";
import React, { useEffect } from "react";
import { useParams } from "react-router-dom";
import { getStatusKey, getStatusLabel } from "../proposals-logic/status.utils";
import RejectButton from "../layout-proposal-common/Button/RejectButton";
import AddProposalModal from "../layout-proposal-common/Modal/AddProposalModal";

function Proposaldetail() {
  const { id } = useParams();
  const {
    proposals,
    fetchProposals,
    setSearchTerm,
    selectedProposal,
    selectedProposalId,
    setSelectedProposalId,
    approveProposal,
    rejectProposal,
    deleteProposal,
    openModal,
    isModalOpen,
    closeModal,
  } = useProposalsStore();

  // Fetch khi chưa có data
  useEffect(() => {
    if (!proposals || proposals.length === 0) fetchProposals();
  }, [proposals, fetchProposals]);

  // Đồng bộ id URL -> selected
  useEffect(() => {
    if (id) setSelectedProposalId(Number(id));
  }, [id, setSelectedProposalId]);

  // Scroll top
  useEffect(() => {
    if (typeof window !== "undefined") {
      window.scrollTo({ top: 0, behavior: "smooth" });
    }
  }, []);

  if (!selectedProposal) {
    return (
      <div style={{ padding: "20px", textAlign: "center" }}>
        <p>Vui lòng chọn một đề xuất để xem chi tiết.</p>
      </div>
    );
  }

  const {
    id: pid,
    title,
    mentor,
    registerDate,
    summary,
    members,
    status,
    goals,
    technologies,
    pdfUrl,
  } = selectedProposal;

  const statusKey = getStatusKey(status);
  const statusLabel = getStatusLabel(statusKey);
  const badgeClass = styles["status-" + statusKey];

  const isWaiting = statusKey === "waiting";
  const isApproved = statusKey === "approved";
  const isRejected = statusKey === "reject";

  const handleApprove = () => {
    approveProposal(pid).then(() => {
      window.location.href = "/proposals";
    });
  };

  const handleReject = () => {
    rejectProposal(pid).then(() => {
      window.location.href = "/proposals";
    });
  };

  const handleDelete = () => {
    if (!confirm("Bạn có chắc chắn muốn xóa?")) return;
    deleteProposal(pid).then(() => {
      window.location.href = "/proposals";
    });
  };

  return (
    <div style={{ backgroundColor: "#EAF2FD" }}>
      <HeaderDetail />
      <div className={styles["container"]}>
        <div className={styles["left-content"]}>
          <ProposalSearch onSearch={setSearchTerm} />
          <div className={styles["Proposal-details-card"]}>
            <CardDetailsList
              proposals={proposals}
              selectedProposalId={selectedProposalId}
              setSelectedProposalId={setSelectedProposalId}
            />
          </div>
        </div>

        <div className={styles["right-content"]}>
          <div className={styles["right-content-overview-card"]}>
            <div className={styles["right-content-overview-card-header"]}>
              <div
                className={styles["right-content-overview-card-header-left"]}
              >
                <span
                  className={styles["DetailsCard-id"]}
                  style={{ marginRight: "10px" }}
                >
                  {pid}
                </span>
                <span
                  className={`${styles["DetailsCard-status"]} ${badgeClass}`}
                >
                  {statusLabel}
                </span>
              </div>

              <div
                className={styles["right-content-overview-card-header-right"]}
              >
                {isWaiting && <ApprovedButton onClick={handleApprove} />}
                {isWaiting && <RejectButton onClick={handleReject} />}
                {(isApproved || isRejected) && (
                  <DeleteButton onClick={handleDelete} />
                )}
              </div>
            </div>

            <div className={styles["right-content-overview-card-body"]}>
              <h3 className={styles["DetailsCard-title"]}>{title}</h3>
              <span className={styles["overview-card-wrapper-info"]}>
                <img
                  src="https://bom.edu.vn/public/upload/2024/12/avatar-vo-tri-cute-1.webp"
                  alt="Avatar"
                  className={styles["DetailsCard-avatar"]}
                />
                <div className={styles["overview-card-wrapper-info-text"]}>
                  <p
                    className={styles["DetailsCard-mentor"]}
                    style={{ color: "#000" }}
                  >
                    GVHD: {mentor}
                  </p>
                  <p
                    className={styles["DetailsCard-date"]}
                    style={{ marginBottom: 0 }}
                  >
                    Ngày đăng ký: {registerDate}
                  </p>
                </div>
              </span>

              <h1 className={styles["overview-card-member-info-title"]}>
                Danh sách thành viên:
              </h1>
              <ul className={styles["overview-card-member-info-list"]}>
                {members.map((member, index) => (
                  <li
                    key={index}
                    className={styles["overview-card-member-info-item"]}
                  >
                    <img
                      src={`https://hinhnenpowerpoint.app/wp-content/uploads/2024/11/avatar-vo-tri-nam-hai-huoc-${
                        (index % 5) + 1
                      }.png`}
                      alt="avatar-member"
                      className={styles["overview-card-member-info-avatar"]}
                    />
                    <div
                      className={styles["overview-card-member-info-item-text"]}
                    >
                      <p className={styles["overview-card-member-info-name"]}>
                        {member}
                      </p>
                      <p className={styles["overview-card-member-student-id"]}>
                        {`28211134${(100 + index).toString().padStart(3, "0")}`}
                      </p>
                    </div>
                  </li>
                ))}
              </ul>
            </div>
          </div>

          <div className={styles["right-content-discribe-card"]}>
            <h3 className={styles["right-content-discribe-card-title"]}>
              Mô tả đồ án
            </h3>
            <p className={styles["right-content-discribe-card-description"]}>
              {summary}
            </p>
          </div>

          <div className={styles["right-content-goal-card"]}>
            <h3 className={styles["right-content-goal-card-title"]}>
              Mục tiêu đồ án
            </h3>
            <ol className={styles["right-content-goal-card-list"]}>
              {goals.map((goal, index) => (
                <li
                  key={index}
                  className={styles["right-content-goal-card-item"]}
                >
                  {goal}
                </li>
              ))}
            </ol>
          </div>

          <div className={styles["right-content-technology-card"]}>
            <h3 className={styles["right-content-technology-card-title"]}>
              Công nghệ sử dụng
            </h3>
            <ul className={styles["right-content-technology-card-list"]}>
              {technologies.map((tech, index) => (
                <li
                  key={index}
                  className={styles["right-content-technology-card-item"]}
                >
                  {tech}
                </li>
              ))}
            </ul>
          </div>

          <div className={styles["right-content-document-card"]}>
            <h3 className={styles["right-content-document-card-title"]}>
              Tài liệu đính kèm
            </h3>
            <ul className={styles["right-content-document-card-list"]}>
              {pdfUrl ? (
                <li className={styles["right-content-document-card-item"]}>
                  <div
                    className={
                      styles["right-content-document-card-item-content"]
                    }
                  >
                    <span
                      className={
                        styles["right-content-document-card-item-content-icon"]
                      }
                    >
                      <FontAwesomeIcon icon={faFile} />
                    </span>
                    <span
                      className={
                        styles[
                          "right-content-document-card-item-content-wrapper"
                        ]
                      }
                    >
                      <p
                        className={
                          styles[
                            "right-content-document-card-item-content-text"
                          ]
                        }
                      >
                        Tài liệu đề xuất
                      </p>
                      <p
                        className={
                          styles[
                            "right-content-document-card-item-content-number"
                          ]
                        }
                      >
                        {pdfUrl.toLowerCase().endsWith(".pdf") ? "PDF" : "File"}
                      </p>
                    </span>
                  </div>
                  <a
                    href={pdfUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    className={
                      styles["right-content-document-card-item-button"]
                    }
                  >
                    <FontAwesomeIcon icon={faDownload} />
                    <p
                      className={
                        styles["right-content-document-card-item-button-text"]
                      }
                    >
                      Mở/Tải
                    </p>
                  </a>
                </li>
              ) : (
                <p className={styles["no-document"]}>
                  Chưa có tài liệu đính kèm.
                </p>
              )}
            </ul>
          </div>
        </div>
      </div>
      <AddProposalModal isOpen={isModalOpen} onClose={closeModal} />
    </div>
  );
}

export default Proposaldetail;

```

### src\features\proposals\proposal-detail-UI\Proposal-details-list.jsx
```jsx
import styles from "./ProposalDetails.module.scss";
import CardDetails from "./CardDetails";
// XÓA: Không import data cứng nữa, nhận qua props
// import proposals from "../proposals-data";   

// Cập nhật props để nhận proposals, selectedProposalId, setSelectedProposalId
function CardDetailsList({ proposals, selectedProposalId, setSelectedProposalId }) {
  if (!proposals || proposals.length === 0) {
    return <p>Không có đề tài nào</p>;
  }

  return (
    <div className={styles["DetailsList-wrapper"]}>
      {proposals.map((p) => (
        <CardDetails 
          key={p.id} 
          proposal={p} 
          selectedProposalId={selectedProposalId} // Truyền state
          setSelectedProposalId={setSelectedProposalId} // Truyền setter
        />
      ))}
    </div>
  );
}

export default CardDetailsList;
```

### src\features\proposals\proposals-logic\ProposalSearch-logic.jsx
```jsx
export const searchProposals = (proposals, searchTerm) => {
  if (!searchTerm) {
    return proposals;
  }

  const normalizedSearchTerm = searchTerm.toLowerCase();

  return proposals.filter((p) => {
    // Tìm kiếm theo mã nhóm (id)
    const matchesId = p.id.toLowerCase().includes(normalizedSearchTerm);

    // Tìm kiếm theo tên đề tài (title)
    const matchesTitle = p.title.toLowerCase().includes(normalizedSearchTerm);

    // Tìm kiếm theo tên giảng viên hướng dẫn (mentor)
    const matchesMentor = p.mentor.toLowerCase().includes(normalizedSearchTerm);

    return matchesId || matchesTitle || matchesMentor;
  });
};

```

### src\features\proposals\proposals-logic\status.utils.js
```js
// Chuẩn hoá mọi chuỗi trạng thái -> key thống nhất: approved | waiting | reject
export function getStatusKey(raw) {
  const s = (raw || "").toString().trim().toLowerCase().normalize("NFC");

  // reject
  if (s.includes("từ chối") || s.includes("reject")) return "reject";

  // waiting (chờ / chưa duyệt / đang / pending)
  if (
    s.includes("chờ") ||
    s.includes("chưa duyệt") ||
    s.includes("đang") ||
    s.includes("pending") ||
    s.includes("được duyệt")
  ) {
    return "waiting";
  }

  // approved (đã duyệt / đã phê duyệt / approved)
  if (
    s.includes("duyệt") ||
    s.includes("phê duyệt") ||
    s.includes("approved")
  ) {
    return "approved";
  }

  return "waiting";
}

// Label hiển thị THỐNG NHẤT cho cả 2 trang
export function getStatusLabel(key) {
  switch (key) {
    case "approved":
      return "Đã Duyệt";
    case "waiting":
      return "Chờ Được Duyệt";
    case "reject":
      return "Bị Từ Chối";
    default:
      return "Chờ Được Duyệt";
  }
}

```

### src\features\proposals\proposals-logic\useGoBack.jsx
```jsx
import { useNavigate } from "react-router-dom";

const useGoBack = () => {
  const navigate = useNavigate();
  const goBack = () => {
    navigate(-1);
  };

  return goBack;
};

export default useGoBack;

```

### src\features\proposals\proposals-logic\useProposalsStore.jsx
```jsx
// src/features/proposals/proposals-logic/useProposalsStore.jsx
import { create } from "zustand";

const ENV_BASE = import.meta?.env?.VITE_API_URL?.replace(/\/$/, "");
const API_BASE = ENV_BASE || "http://localhost:5295/api";
const API_HOST = API_BASE.replace(/\/api$/, ""); // để ghép URL tương đối
const PROPOSALS_URL = `${API_BASE}/Proposal`;

const parseApiResponse = async (res) => {
  const text = await res.text();
  try {
    return JSON.parse(text);
  } catch {
    return { success: res.ok, message: text || res.statusText, data: null };
  }
};

// ====== Auth helpers (giữ nguyên) ======
const getToken = () =>
  localStorage.getItem("token") || sessionStorage.getItem("token") || "";

const authHeaders = (
  base = {},
  { hasBody = false, isFormData = false } = {}
) => {
  const h = { ...base };
  const token = getToken();
  if (token) h["Authorization"] = `Bearer ${token}`;
  if (hasBody && !isFormData) h["Content-Type"] = "application/json";
  return h;
};

const USE_COOKIES = false;

// ====== NEW: tìm URL PDF ở mọi ngóc ngách ======
const extractPdfUrl = (input) => {
  const seen = new WeakSet();
  const isUrlLike = (s) =>
    typeof s === "string" && /\.[Pp][Dd][Ff](\?|$)/.test(s);
  const goodKey = (k = "") =>
    /(pdf|file|doc|attachment|document|path|url)/i.test(k);

  const dfs = (v, key = "") => {
    if (v == null) return null;

    // String candidate
    if (typeof v === "string") {
      if (isUrlLike(v)) return v;
      if (goodKey(key)) return v; // một số BE không có .pdf nhưng là URL file
      return null;
    }

    // Array
    if (Array.isArray(v)) {
      for (const item of v) {
        const found = dfs(item, key);
        if (found) return found;
      }
      return null;
    }

    // Object
    if (typeof v === "object") {
      if (seen.has(v)) return null;
      seen.add(v);
      for (const k of Object.keys(v)) {
        const val = v[k];
        // ưu tiên key “nghe” như file/pdf
        if (goodKey(k)) {
          const found = dfs(val, k);
          if (found) return found;
        }
      }
      // nếu chưa thấy, duyệt tiếp tất cả key
      for (const k of Object.keys(v)) {
        const found = dfs(v[k], k);
        if (found) return found;
      }
    }
    return null;
  };

  return dfs(input);
};

// ====== STORE ======
export const useProposalsStore = create((set, get) => ({
  isModalOpen: false,
  mode: "add",
  selectedProposal: null,
  setIsModalOpen: (v) => set({ isModalOpen: !!v }),
  openModal: (mode = "add", proposal = null) =>
    set({ isModalOpen: true, mode, selectedProposal: proposal }),
  closeModal: () =>
    set({ isModalOpen: false, mode: "add", selectedProposal: null }),

  proposals: [],
  finalProposals: [],
  selectedProposalId: null,
  searchTerm: "",
  counts: { "Tất cả": 0, "Đã duyệt": 0, "Chờ duyệt": 0, "Bị từ chối": 0 },
  isLoading: false,
  error: null,

  setError: (err) => set({ error: err }),

  setSearchTerm: (term) => {
    const filtered = (get().proposals || []).filter((p) =>
      (p.title || "").toLowerCase().includes((term || "").toLowerCase())
    );
    set({ searchTerm: term, finalProposals: filtered });
  },

  setSelectedProposalId: (id) => {
    const proposals = get().proposals || [];
    const selected = proposals.find((p) => String(p.id) === String(id)) || null;
    set({ selectedProposalId: id, selectedProposal: selected });
  },

  setMode: (mode) => set({ mode }),

  // ====== NORMALIZE (đã nâng cấp bắt file PDF) ======
  normalizeProposal: (p) => {
    // cố gắng lấy theo các field quen thuộc trước
    let pdf =
      p?.pdfUrl ||
      p?.filePath ||
      p?.pdfPath ||
      p?.documentUrl ||
      p?.documentPath ||
      p?.fileUrl ||
      "";

    // nếu vẫn chưa có -> quét sâu toàn object
    if (!pdf) pdf = extractPdfUrl(p);

    // debug nhẹ để bạn kiểm tra BE trả gì
    if (!pdf) {
      console.log("🕵️ Không tìm thấy PDF trong item:", p);
    } else {
      console.log("📄 PDF phát hiện:", pdf);
    }

    // nếu là đường dẫn tương đối -> ghép host
    if (pdf && !/^https?:\/\//i.test(pdf)) {
      pdf = `${API_HOST}${pdf.startsWith("/") ? "" : "/"}${pdf}`;
    }

    return {
      id: String(p.projectId || p.id),
      title: p.title || "Không có tiêu đề",
      summary: p.description || p.summary || "Chưa có mô tả",
      mentor:
        p.mentor?.fullName ||
        p.lecturer?.fullName ||
        p.mentorName ||
        "Chưa có giảng viên",
      members: Array.isArray(p.teamMembers)
        ? p.teamMembers.map(
            (m) => m.fullName || m.studentName || m.name || "Thành viên"
          )
        : [],
      registerDate: p.registrationDate
        ? new Date(p.registrationDate).toLocaleDateString("vi-VN")
        : "N/A",
      status:
        p.status === "Pending" || p.status === "0" || !p.status
          ? "Chờ duyệt"
          : p.status === "Approved" || p.status === "1"
          ? "Đã duyệt"
          : p.status === "Rejected" || p.status === "2"
          ? "Bị từ chối"
          : "Chờ duyệt",
      goals: p.goals || ["Chưa cập nhật"],
      technologies: p.technologies || ["Chưa cập nhật"],
      pdfUrl: pdf || "",
    };
  },

  // ====== ADD / GET / APPROVE / REJECT / DELETE (giữ nguyên logic trước) ======
  addProposal: async (formData) => {
    set({ isLoading: true, error: null });
    try {
      const res = await fetch(`${PROPOSALS_URL}/upload`, {
        method: "POST",
        headers: authHeaders({}, { hasBody: true, isFormData: true }),
        body: formData,
        credentials: USE_COOKIES ? "include" : "same-origin",
      });
      const payload = await parseApiResponse(res);
      if (!res.ok)
        throw new Error(
          payload?.message || res.statusText || "Tạo đề tài thất bại"
        );
      await get().fetchProposals();
      set({
        isLoading: false,
        isModalOpen: false,
        mode: "add",
        selectedProposal: null,
      });
      return true;
    } catch (err) {
      console.error("Lỗi khi tạo đề tài:", err);
      set({ isLoading: false, error: err.message });
      alert(`Tạo đề tài thất bại: ${err.message}`);
      return false;
    }
  },

  fetchProposals: async () => {
    set({ isLoading: true, error: null });
    try {
      const res = await fetch(PROPOSALS_URL, {
        method: "GET",
        headers: authHeaders(),
        credentials: USE_COOKIES ? "include" : "same-origin",
      });
      const payload = await parseApiResponse(res);
      if (!res.ok)
        throw new Error(
          payload?.message || res.statusText || "Lỗi tải dữ liệu"
        );

      const rawData = payload?.data ?? payload;
      const normalizedData = (rawData || []).map(get().normalizeProposal);

      const counts = {
        "Tất cả": normalizedData.length,
        "Đã duyệt": normalizedData.filter((p) => p.status === "Đã duyệt")
          .length,
        "Chờ duyệt": normalizedData.filter((p) => p.status === "Chờ duyệt")
          .length,
        "Bị từ chối": normalizedData.filter((p) => p.status === "Bị từ chối")
          .length,
      };

      set({
        proposals: normalizedData,
        finalProposals: normalizedData,
        counts,
        selectedProposalId: normalizedData[0]?.id || null,
        selectedProposal: normalizedData[0] || null,
        isLoading: false,
      });
    } catch (e) {
      console.error("Lỗi khi tải danh sách đề tài:", e);
      set({
        error: e.message,
        isLoading: false,
        proposals: [],
        finalProposals: [],
      });
    }
  },

  approveProposal: async (id) => {
    const { selectedProposal } = get();
    if (selectedProposal?.status !== "Chờ duyệt") {
      alert("Chỉ có thể duyệt đề tài đang chờ duyệt!");
      return;
    }
    set({ isLoading: true, error: null });
    try {
      const res = await fetch(`${PROPOSALS_URL}/${id}/status`, {
        method: "PUT",
        headers: authHeaders({}, { hasBody: true }),
        body: JSON.stringify({ Status: "Approved" }),
        credentials: USE_COOKIES ? "include" : "same-origin",
      });
      const payload = await parseApiResponse(res);
      if (!res.ok) throw new Error(payload?.message || "Duyệt đề tài thất bại");

      await get().fetchProposals();
      set({
        selectedProposalId: null,
        selectedProposal: null,
        isLoading: false,
      });
    } catch (err) {
      console.error("Lỗi khi duyệt đề tài:", err);
      set({ error: err.message, isLoading: false });
      alert(`Duyệt thất bại: ${err.message}`);
    }
  },

  rejectProposal: async (id) => {
    const { selectedProposal } = get();
    if (selectedProposal?.status !== "Chờ duyệt") {
      alert("Chỉ có thể từ chối đề tài đang chờ duyệt!");
      return;
    }
    set({ isLoading: true, error: null });
    try {
      const res = await fetch(`${PROPOSALS_URL}/${id}/status`, {
        method: "PUT",
        headers: authHeaders({}, { hasBody: true }),
        body: JSON.stringify({
          Status: "Rejected",
          RejectionReason: "Không phù hợp",
        }),
        credentials: USE_COOKIES ? "include" : "same-origin",
      });
      const payload = await parseApiResponse(res);
      if (!res.ok)
        throw new Error(payload?.message || "Từ chối đề tài thất bại");

      await get().fetchProposals();
      set({
        selectedProposalId: null,
        selectedProposal: null,
        isLoading: false,
      });
    } catch (err) {
      console.error("Lỗi khi từ chối đề tài:", err);
      set({ error: err.message, isLoading: false });
      alert(`Từ chối thất bại: ${err.message}`);
    }
  },

  deleteProposal: async (id) => {
    set({ isLoading: true, error: null });
    try {
      const res = await fetch(`${PROPOSALS_URL}/${id}`, {
        method: "DELETE",
        headers: authHeaders(),
        credentials: USE_COOKIES ? "include" : "same-origin",
      });
      const payload = await parseApiResponse(res);
      if (!res.ok) throw new Error(payload?.message || "Xóa đề tài thất bại");

      await get().fetchProposals();
      set({
        selectedProposalId: null,
        selectedProposal: null,
        isLoading: false,
      });
    } catch (err) {
      console.error("Lỗi khi xóa đề tài:", err);
      set({ error: err.message, isLoading: false });
      alert(`Xóa thất bại: ${err.message}`);
    }
  },

  setFilterStatus: (status) => {
    let filtered = get().proposals || [];
    if (status && status !== "Tất cả")
      filtered = filtered.filter((p) => p.status === status);
    set({ finalProposals: filtered });
  },
}));

```

### src\features\proposals\proposals-logic\useProposalTabs.jsx
```jsx
export const filterProposals = (proposals, status) => {
  if (status === "Tất cả") {
    return proposals;
  }
  return proposals.filter((p) => p.status === status);
};

```

### src\features\proposals\proposals-management-UI\HeaderManagement.jsx
```jsx
import Header from "../layout-proposal-common/Header";
import AddButton from "../layout-proposal-common/Button/Addbutton";
import AddProposalModal from "../layout-proposal-common/Modal/AddProposalModal";
import { useProposalsStore } from "../proposals-logic/useProposalsStore";

function HeaderManagement() {
  // Dùng đúng state & action trong store hiện tại
  const { isModalOpen, openModal, closeModal, addProposal } = useProposalsStore();

  return (
    <div>
      <Header
        heading="Quản lý đồ án"
        subheading="Danh sách tất cả các đồ án Capstone"
        // Khi bấm nút + sẽ mở modal
        rightContent={<AddButton onClick={openModal} />}
      />

      <AddProposalModal
        isOpen={isModalOpen}
        onClose={closeModal}
        onSubmit={(payload) => addProposal(payload)}
      />
    </div>
  );
}

export default HeaderManagement;

```

### src\features\proposals\proposals-management-UI\ProposalCard.jsx
```jsx
// ProposalCard.jsx
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faUserGroup } from "@fortawesome/free-solid-svg-icons";
import { faCalendar } from "@fortawesome/free-regular-svg-icons";
import styles from "./Proposal.module.scss";
import ViewDetailButton from "../layout-proposal-common/Button/ViewDetailButton"; // Nhập component button mới

// Hàm xử lý tên tùy chỉnh
const formatName = (fullName) => {
  if (!fullName) return '';
  const parts = fullName.split(' ');
  
  if (parts.length > 2) {
    const lastName = parts[parts.length - 1]; 
    const middleName = parts[parts.length - 2]; 
    const firstNames = parts.slice(0, parts.length - 2); 
    
    const initials = firstNames.map(part => part.charAt(0)).join('.');
    
    return `${initials}. ${middleName} ${lastName}`;
  } else if (parts.length === 2) {
    return `${parts[0].charAt(0)}. ${parts[1]}`;
  } else {
    return fullName;
  }
};

function ProposalCard({ proposal }) {
  const { id, title, summary, mentor, members, registerDate, approveDate, status } = proposal;

  let statusClass = "";
  if (status === "Đã duyệt") statusClass = styles['Card-status-approved'];
if (status === "Chờ duyệt") statusClass = styles["Card-status-waiting"];
if (status === "Bị từ chối") statusClass = styles["Card-status-reject"];
  
  const formattedMentorName = formatName(mentor);
  const formattedMembers = members.map(m => formatName(m));

  return (
    <div className={styles["Card-wrapper"]}>
      {/* Header */}
      <div className={styles["Card-header"]}>
        <span className={styles["Card-id"]}>{id}</span>
        <p className={statusClass}>{status}</p>
      </div>

      {/* Summary */}
      <div className={styles["Card-proposal-summary"]}>
        <h1 className={styles["Card-proposal-summary-header"]}>{title}</h1>
        <p className={styles["Card-proposal-summary-content"]}>{summary}</p>
        <span className={styles["Card-proposal-summary-line"]}></span>
      </div>

      {/* Mentor */}
      <div className={styles["Card-mentor-info"]}>
        <h1 className={styles["Card-mentor-info-content-header"]}>Giảng Viên Hướng Dẫn:</h1>
        <p className={styles["Card-mentor-info-content-text"]}>{formattedMentorName}</p>
      </div>

      {/* Members */}
      <div className={styles["Card-member-info"]}>
        <div className={styles["Card-member-info-header"]}>
          <span className={styles["Card-member-info-header-icon"]}>
            <FontAwesomeIcon icon={faUserGroup} />
          </span>
          <span className={styles["Card-member-info-header-text"]}>Thành viên nhóm</span>
          <span className={styles["Card-member-info-header-numer"]}>
            ({members.length}): 
          </span>
        </div>
        <div className={styles["Card-member-info-content"]}>
          {formattedMembers.map((m, i) => (
            <span key={i} className={styles["Card-member-info-content-text"]}>
              {m}
            </span>
          ))}
        </div>
      </div>

      {/* Dates */}
      <div className={styles["Card-date"]}>
        <span className={styles["Card-date-register"]}>
          <span className={styles["Card-date-register-icon"]}>
            <FontAwesomeIcon icon={faCalendar} />
          </span>
          <span className={styles["Card-date-register-text"]}>Ngày đăng ký:</span>
          <div className={styles["Card-date-register-content"]}>{registerDate}</div>
        </span>

        <span className={styles["Card-date-approve"]}>
          <span className={styles["Card-date-approve-icon"]}>
            <FontAwesomeIcon icon={faCalendar} />
          </span>
          <span className={styles["Card-date-approve-text"]}>Ngày duyệt:</span>
          <div className={styles["Card-date-approve-content"]}>{approveDate}</div>
        </span>
      </div>

      {/* Thay thế button cũ bằng component mới */}
      <ViewDetailButton id={id} />
    </div>
  );
}

export default ProposalCard;
```

### src\features\proposals\proposals-management-UI\ProposalList.jsx
```jsx
// ProposalList.jsx
import React, { useEffect } from "react";
import styles from "./Proposal.module.scss";
import ProposalCard from "./ProposalCard";
import ProposalTabs from "./ProposalTabs";
import { useProposalsStore } from "../proposals-logic/useProposalsStore";

export default function ProposalList() {
  const {
    finalProposals, // Sử dụng finalProposals thay vì proposals
    counts,
    setFilterStatus,
    setSearchTerm,
    setSelectedProposalId,
    fetchProposals,
    isLoading,
    error,
  } = useProposalsStore();

  // Tự động fetch data khi load trang
  useEffect(() => {
    fetchProposals();
  }, [fetchProposals]);

  // Debug tạm thời để xem dữ liệu và lọc
  useEffect(() => {
    console.log("📦 finalProposals:", finalProposals);
  }, [finalProposals]);

  // Bảo vệ: luôn có mảng để map
  const list = Array.isArray(finalProposals) ? finalProposals : [];

  // Nếu đang tải dữ liệu
  if (isLoading) {
    return <p style={{ padding: 16 }}>Đang tải danh sách đề tài...</p>;
  }

  // Nếu xảy ra lỗi
  if (error) {
    return <p style={{ padding: 16, color: "red" }}>Lỗi: {error}</p>;
  }

  return (
    <>
      <ProposalTabs
        onTabChange={setFilterStatus}
        counts={counts}
        onSearch={setSearchTerm}
      />

      <div className={styles["List-wrapper"]}>
        {list.length === 0 ? (
          <p style={{ padding: 16 }}>Không có đề tài nào phù hợp.</p>
        ) : (
          list.map((p) => (
            <ProposalCard
              key={p.id}
              proposal={p}
              setSelectedProposalId={setSelectedProposalId}
            />
          ))
        )}
      </div>
    </>
  );
}
```

### src\features\proposals\proposals-management-UI\ProposalSearch.jsx
```jsx
import { faMagnifyingGlass } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import styles from './Proposal.module.scss';

function ProposalSearch({ onSearch }) {
    const handleSearchChange = (event) => {
        onSearch(event.target.value);
    };

    return ( 
    <div className={styles['search-wrapper']}>
    <span className={styles['search-proposal-icon']}>
    <FontAwesomeIcon icon={faMagnifyingGlass} />
    </span>
    
    <input 
      type="text" 
      placeholder="Tìm kiếm đồ án..." 
      className={styles['input-search']} 
      onChange={handleSearchChange}
    />
    
    </div>
     );
}

export default ProposalSearch;
```

### src\features\proposals\proposals-management-UI\ProposalTabs.jsx
```jsx
import { useState } from 'react';
import styles from './Proposal.module.scss';
import ProposalSearch from './ProposalSearch';

function Tabs({ onTabChange, counts, onSearch }) {
  const [activeIndex, setActiveIndex] = useState(0);

  const tabs = [
    "Tất cả",
    "Đã duyệt",
    "Chờ duyệt",
    "Bị từ chối"
  ];

  const handleTabClick = (index, tabName) => {
    setActiveIndex(index);
    if (typeof onTabChange === 'function') {
      onTabChange(tabName);
    } else {
      console.warn('onTabChange không phải là hàm, vui lòng kiểm tra prop từ component cha.');
    }
  };

  return (
    <div className={styles['tabs-wrapper']}>
      <ul className={styles['tabs-list']}>
        {tabs.map((tab, index) => (
          <li
            key={index}
            className={`${styles['tabs-list-item']} ${activeIndex === index ? styles.active : ''}`}
            onClick={() => handleTabClick(index, tab)}
          >
            {tab} ({counts[tab] || 0})
          </li>
        ))}
      </ul>
      <ProposalSearch onSearch={onSearch} />
    </div>
  );
}

export default Tabs;
```

### src\hooks\useAuth.js
```js

```

### src\layouts\DashboardLayout.js
```js

```

### src\pages\admin\AdminLayout.jsx
```jsx
import React, { useEffect } from "react";
import Navbar from "../../components/common/Navbar";
import { Outlet, useNavigate } from "react-router-dom";
import "./AdminLayout.scss";
import { jwtDecode } from "jwt-decode";
import { refreshTokenAPI } from "../../services/AuthAPI"; // bạn đã có hàm này

const AdminLayout = () => {
  const navigate = useNavigate();

  useEffect(() => {
    const token = localStorage.getItem("token");
    const refreshToken = localStorage.getItem("refreshToken");

    if (!token || !refreshToken) {
      navigate("/", { replace: true });
      return;
    }

    try {
      const decoded = jwtDecode(token);
      const now = Date.now() / 1000;

      // Nếu token hết hạn → thử refresh
      if (!decoded.exp || decoded.exp < now) {
        refreshTokenAPI({ token, refreshToken })
          .then((data) => {
            localStorage.setItem("token", data.token);
          })
          .catch(() => {
            localStorage.clear();
            navigate("/", { replace: true });
          });
        return;
      }

      // Check role
      const role =
        decoded.AccountType ||
        decoded.accountType ||
        decoded["http://schemas.microsoft.com/ws/2008/06/identity/claims/role"];

      if (role !== "Admin") {
        navigate("/", { replace: true });
      }
    } catch (error) {
      console.error("Error decoding token:", error);
      localStorage.clear();
      navigate("/", { replace: true });
    }
  }, [navigate]);

  return (
    <div className="admin-page">
      <header className="admin-navbar">
        <div className="navbar-inner">
          <Navbar />
        </div>
      </header>

      <main className="admin-container">
        <div className="admin-content">
          <Outlet />
        </div>
      </main>
    </div>
  );
};

export default AdminLayout;

```

### src\pages\admin\Proposals.jsx
```jsx
import HeaderManagement from "../../features/proposals/proposals-management-UI/HeaderManagement";
import ProposalList from "../../features/proposals/proposals-management-UI/ProposalList";
export default function Proposals() {
  return (
    <div style={{ backgroundColor: "#EAF2FD" }}>
      <HeaderManagement />

      <ProposalList />
    </div>
  );
}

```

### src\pages\admin\QuanLyDoAn\QuanLyDoAn.jsx
```jsx
import React, { useEffect, useState, useMemo, useCallback } from "react";
import "./QuanLyDoAn.scss";
import { getAllTeamsAPI } from "../../../services/TeamsAPI";
import {
  useReactTable,
  getCoreRowModel,
  getPaginationRowModel,
  flexRender,
} from "@tanstack/react-table";
import ViewAction from "./Action/ViewAction";
import UpdateAction from "./Action/UpdateAction";

const QuanLyDoAn = () => {
  const [projects, setProjects] = useState([]);
  const [rawData, setRawData] = useState([]);
  const [capstoneType, setCapstoneType] = useState("1");
  const [year, setYear] = useState("");
  const [semester, setSemester] = useState("");
  const [status, setStatus] = useState("");
  const [search, setSearch] = useState("");
  const [loading, setLoading] = useState(false);
  const [show, setShow] = useState(false);
  const [teamId, setTeamId] = useState(null);
  const [update, setUpdate] = useState(false);

  // ---- Fetch dữ liệu từ API ----
  const fetchProjects = useCallback(async () => {
    try {
      setLoading(true);
      const apiCapstoneType = capstoneType ? Number(capstoneType) : undefined;
      const res = await getAllTeamsAPI(apiCapstoneType);
      const data = res.data || [];
      setRawData(data);
      // Lúc fetch về thì áp dụng filter luôn
      applyFilters(data);
    } catch (err) {
      console.error("Fetch projects error:", err);
      setRawData([]);
      setProjects([]);
    } finally {
      setLoading(false);
    }
  }, [capstoneType, year, semester, status, search]);

  // ---- Áp dụng filter (chỉ gọi trong fetch hoặc refresh) ----
  const applyFilters = (data) => {
    let filtered = [...data];

    if (year) filtered = filtered.filter((t) => t.academicYear === year);
    if (semester)
      filtered = filtered.filter((t) => String(t.semester) === semester);
    if (status) filtered = filtered.filter((t) => t.status === status);

    if (search) {
      const s = search.toLowerCase();
      filtered = filtered.filter(
        (t) =>
          (t.projectTitle && t.projectTitle.toLowerCase().includes(s)) ||
          (t.teamName && t.teamName.toLowerCase().includes(s))
      );
    }

    setProjects(filtered);
  };

  // Gọi API khi capstoneType thay đổi (ban đầu hoặc chọn lại Capstone 1/2)
  useEffect(() => {
    fetchProjects();
  }, [capstoneType, fetchProjects]);

  // ---- react-table config ----
  const columns = useMemo(
    () => [
      {
        header: "Loại Capstone",
        accessorKey: "capstoneType",
        cell: (info) => `Capstone ${info.getValue()}`,
      },
      {
        header: "Đề tài",
        accessorKey: "projectTitle",
        cell: (info) => info.getValue() || "—",
      },
      { header: "Nhóm", accessorKey: "teamName" },
      {
        header: "Mentor",
        accessorKey: "mentorName",
        cell: (info) => info.getValue() || "Chưa có",
      },
      {
        header: "Trạng thái",
        accessorKey: "status",
        cell: (info) => {
          const value = info.getValue();
          return (
            <span className={`status-badge ${value?.toLowerCase()}`}>
              {value || "—"}
            </span>
          );
        },
      },
      {
        header: "Ngày bảo vệ",
        accessorKey: "defenseDate",
        cell: (info) =>
          info.getValue()
            ? new Date(info.getValue()).toLocaleDateString()
            : "—",
      },
      {
        header: "Hành động",
        accessorKey: "teamId",
        cell: (info) => {
          const value = info.getValue();
          return (
            <div className="qlda-actions">
              <button
                onClick={() => {
                  setShow(true);
                  setTeamId(value);
                }}
              >
                Xem
              </button>
              <button
                onClick={() => {
                  setUpdate(true);
                  setTeamId(value);
                }}
              >
                Sửa
              </button>
              <button onClick={() => alert(`Xóa ${value}`)}>Xóa</button>
            </div>
          );
        },
      },
    ],
    []
  );

  const table = useReactTable({
    data: projects,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    initialState: {
      pagination: {
        pageIndex: 0,
        pageSize: 5,
      },
    },
  });
  const pageIndex = table.getState().pagination.pageIndex;
  const pageSize = table.getState().pagination.pageSize;
  const pageCount = table.getPageCount();
  const canPreviousPage = table.getCanPreviousPage();
  const canNextPage = table.getCanNextPage();

  return (
    <div className="quanlydoan-page">
      <header className="qlda-toolbar">
        <select
          value={capstoneType}
          onChange={(e) => setCapstoneType(e.target.value)}
        >
          <option value="1">Capstone 1</option>
          <option value="2">Capstone 2</option>
        </select>
        <select value={year} onChange={(e) => setYear(e.target.value)}>
          <option value="">Tất cả năm</option>
          <option value="2024-2025">2024-2025</option>
          <option value="2025-2026">2025-2026</option>
        </select>
        <select value={semester} onChange={(e) => setSemester(e.target.value)}>
          <option value="">Tất cả học kỳ</option>
          <option value="1">HK1</option>
          <option value="2">HK2</option>
          <option value="3">Summer</option>
        </select>
        <select value={status} onChange={(e) => setStatus(e.target.value)}>
          <option value="">Tất cả trạng thái</option>
          <option value="Active">Đang thực hiện</option>
          <option value="Pending">Chờ duyệt</option>
          <option value="Completed">Hoàn thành</option>
          <option value="Defending">Sắp bảo vệ</option>
        </select>
        <input
          type="text"
          placeholder="Tìm đề tài / nhóm…"
          value={search}
          onChange={(e) => setSearch(e.target.value)}
        />
        {/* Chỉ khi nhấn mới áp dụng filter */}
        <button onClick={() => applyFilters(rawData)}>Refresh</button>
      </header>

      {loading ? (
        <p>Đang tải dữ liệu...</p>
      ) : (
        <div className="qlda-table-box">
          <table className="qlda-table">
            <thead>
              {table.getHeaderGroups().map((headerGroup) => (
                <tr key={headerGroup.id}>
                  {headerGroup.headers.map((header) => (
                    <th key={header.id}>
                      {flexRender(
                        header.column.columnDef.header,
                        header.getContext()
                      )}
                    </th>
                  ))}
                </tr>
              ))}
            </thead>
            <tbody>
              {table.getRowModel().rows.length === 0 ? (
                <tr>
                  <td colSpan="7" style={{ textAlign: "center" }}>
                    Không có dữ liệu
                  </td>
                </tr>
              ) : (
                table.getRowModel().rows.map((row) => (
                  <tr key={row.id}>
                    {row.getVisibleCells().map((cell) => (
                      <td key={cell.id}>
                        {flexRender(
                          cell.column.columnDef.cell,
                          cell.getContext()
                        )}
                      </td>
                    ))}
                  </tr>
                ))
              )}
            </tbody>
          </table>
          <p>
            Hiển thị {projects.length} đề tài | Trang {pageIndex + 1} /{" "}
            {pageCount}
          </p>

          {/* Điều khiển phân trang */}
          <div className="pagination">
            <button
              onClick={() => table.setPageIndex(0)}
              disabled={!canPreviousPage}
            >
              {"<<"}
            </button>
            <button
              onClick={() => table.previousPage()}
              disabled={!canPreviousPage}
            >
              Trước
            </button>
            <button onClick={() => table.nextPage()} disabled={!canNextPage}>
              Sau
            </button>
            <button
              onClick={() => table.setPageIndex(pageCount - 1)}
              disabled={!canNextPage}
            >
              {">>"}
            </button>

            <select
              value={pageSize}
              onChange={(e) => table.setPageSize(Number(e.target.value))}
            >
              {[5, 10, 20, 30, 50].map((size) => (
                <option key={size} value={size}>
                  Hiển thị {size}
                </option>
              ))}
            </select>
          </div>
        </div>
      )}
      <ViewAction show={show} setShow={setShow} teamId={teamId} />
      <UpdateAction
        show={update}
        setShow={setUpdate}
        teamId={teamId}
        onUpdated={fetchProjects}
      />
    </div>
  );
};

export default QuanLyDoAn;

```

### src\pages\admin\QuanLyDoAn\Action\UpdateAction.jsx
```jsx
import React, { useEffect, useState } from "react";
import { Modal, Button, Form } from "react-bootstrap";
import { getTeamByIdAPI, updateTeamAPI } from "../../../../services/TeamsAPI";

const UpdateAction = ({ show, setShow, teamId, onUpdated }) => {
  const [formData, setFormData] = useState({
    teamName: "",
    projectTitle: "",
    teamLeaderId: "",
    mentorId: "",
    status: "",
  });
  const [loading, setLoading] = useState(false);

  // Lấy dữ liệu nhóm để fill vào form
  useEffect(() => {
    const fetchTeam = async () => {
      if (teamId && show) {
        const response = await getTeamByIdAPI(teamId);
        setFormData({
          teamName: response.data.teamName || "",
          projectTitle: response.data.projectTitle || "",
          teamLeaderId: response.data.teamLeaderId || "",
          mentorId: response.data.mentorId || "",
          status: response.data.status || "",
        });
      }
    };
    fetchTeam();
  }, [teamId, show]);

  // Cập nhật state form khi nhập
  const handleChange = (e) => {
    setFormData((prev) => ({
      ...prev,
      [e.target.name]: e.target.value,
    }));
  };

  const handleSubmit = async () => {
    try {
      setLoading(true);
      await updateTeamAPI(
        teamId,
        formData.teamName,
        formData.projectTitle,
        formData.teamLeaderId,
        formData.mentorId,
        formData.status
      );
      alert("Cập nhật thành công!");
      setShow(false);
      if (onUpdated) onUpdated(); // gọi lại để refresh list
    } catch (error) {
      alert("Cập nhật thất bại: " + error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Modal show={show} onHide={() => setShow(false)} size="lg" centered>
      <Modal.Header closeButton>
        <Modal.Title>Cập nhật nhóm</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <Form>
          <Form.Group className="mb-3">
            <Form.Label>Tên nhóm</Form.Label>
            <Form.Control
              type="text"
              name="teamName"
              value={formData.teamName}
              onChange={handleChange}
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Đề tài</Form.Label>
            <Form.Control
              type="text"
              name="projectTitle"
              value={formData.projectTitle}
              onChange={handleChange}
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Leader (ID)</Form.Label>
            <Form.Control
              type="text"
              name="teamLeaderId"
              value={formData.teamLeaderId}
              onChange={handleChange}
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Mentor (ID)</Form.Label>
            <Form.Control
              type="text"
              name="mentorId"
              value={formData.mentorId}
              onChange={handleChange}
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Trạng thái</Form.Label>
            <Form.Select
              name="status"
              value={formData.status}
              onChange={handleChange}
            >
              <option value="">Chọn trạng thái</option>
              <option value="Active">Đang thực hiện</option>
              <option value="Pending">Chờ duyệt</option>
              <option value="Completed">Hoàn thành</option>
              <option value="Defending">Sắp bảo vệ</option>
            </Form.Select>
          </Form.Group>
        </Form>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="secondary" onClick={() => setShow(false)}>
          Hủy
        </Button>
        <Button variant="primary" onClick={handleSubmit} disabled={loading}>
          {loading ? "Đang lưu..." : "Lưu thay đổi"}
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default UpdateAction;

```

### src\pages\admin\QuanLyDoAn\Action\ViewAction.jsx
```jsx
import React, { useEffect, useState } from "react";
import { Modal, Button, Table, Badge } from "react-bootstrap";
import { getTeamByIdAPI } from "../../../../services/TeamsAPI";
import "bootstrap/dist/css/bootstrap.min.css";

const ViewAction = ({ show, setShow, teamId }) => {
  const [team, setTeam] = useState(null);

  useEffect(() => {
    const fetchTeam = async () => {
      if (teamId) {
        const response = await getTeamByIdAPI(teamId);
        setTeam(response.data);
      }
    };
    fetchTeam();
  }, [teamId]);

  const handleClose = () => setShow(false);

  return (
    <Modal show={show} onHide={handleClose} size="lg" centered>
      <Modal.Header closeButton>
        <Modal.Title>
          Nhóm: <span className="text-primary">{team?.teamName}</span>
        </Modal.Title>
      </Modal.Header>
      <Modal.Body>
        {/* Thông tin tổng quan */}
        <div className="mb-3">
          <p>
            <b>Mã nhóm:</b> {team?.teamId || "—"}
          </p>
          <p>
            <b>Loại Capstone:</b>{" "}
            <Badge bg="info">
              {team?.capstoneType ? `Capstone ${team.capstoneType}` : "Chưa rõ"}
            </Badge>
          </p>
          <p>
            <b>Đề tài:</b> {team?.projectTitle || "Chưa có"}
          </p>
          <p>
            <b>Trạng thái:</b>{" "}
            <Badge
              bg={
                team?.status === "Active"
                  ? "success"
                  : team?.status === "Completed"
                  ? "secondary"
                  : "warning"
              }
            >
              {team?.status}
            </Badge>
          </p>
          <p>
            <b>Mentor:</b> {team?.mentorName || "Chưa có"}
          </p>
          <p>
            <b>Leader:</b> {team?.teamLeaderName}
          </p>
          <p>
            <b>Ngày tạo:</b>{" "}
            {team?.createdDate
              ? new Date(team.createdDate).toLocaleString()
              : "—"}
          </p>
        </div>

        <hr />

        {/* Danh sách sinh viên */}
        <h5 className="mb-3">Danh sách thành viên</h5>
        <Table striped bordered hover size="sm">
          <thead>
            <tr>
              <th>MSSV</th>
              <th>Họ tên</th>
              <th>Khoa</th>
              <th>Chuyên ngành</th>
              <th>GPA</th>
              <th>Email</th>
            </tr>
          </thead>
          <tbody>
            {team?.students?.map((s) => (
              <tr key={s.studentId}>
                <td>{s.studentCode}</td>
                <td>{s.fullName}</td>
                <td>{s.faculty}</td>
                <td>{s.major}</td>
                <td>{s.gpa}</td>
                <td>{s.email}</td>
              </tr>
            ))}
          </tbody>
        </Table>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="secondary" onClick={handleClose}>
          Đóng
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default ViewAction;

```

### src\pages\admin\QuanLyTaiKhoan\QuanLyTaiKhoan.jsx
```jsx
import React, { useState, useEffect } from "react";
import { getAllLecturersAPI } from "../../../services/LecturersAPI";
import { useDispatch, useSelector } from "react-redux";
import { fetchStudents } from "../../../store/studentSlice";
import "./QuanLyTaiKhoan.scss";
import RegisterStudent from "./RegisterStudent/RegisterStudent";

const QuanLyTaiKhoan = () => {
  const [lecturers, setLecturers] = useState([]);
  const [activeTab, setActiveTab] = useState("students");
  const [search, setSearch] = useState("");
  const [showRegisterStudent, setShowRegisterStudent] = useState(false);
  // phân trang
  const [page, setPage] = useState(1); // trang hiện tại
  const [pageSize, setPageSize] = useState(5); // số dòng mỗi trang

  const dispatch = useDispatch();
  const {
    data: students,
    loading,
    error,
  } = useSelector((state) => state.students);

  // fetch students bằng redux
  useEffect(() => {
    dispatch(fetchStudents());
  }, [dispatch]);

  // fetch lecturers trực tiếp
  useEffect(() => {
    const fetchLecturers = async () => {
      try {
        const res = await getAllLecturersAPI();
        setLecturers(res.data || []);
      } catch (err) {
        console.error("Lỗi tải giảng viên:", err);
      }
    };
    fetchLecturers();
  }, []);

  // Lọc theo search
  const filteredStudents = (students || []).filter(
    (s) =>
      (s.fullName && s.fullName.toLowerCase().includes(search.toLowerCase())) ||
      (s.studentCode &&
        s.studentCode.toLowerCase().includes(search.toLowerCase()))
  );

  const filteredLecturers = (lecturers || []).filter(
    (l) =>
      (l.fullName && l.fullName.toLowerCase().includes(search.toLowerCase())) ||
      (l.lecturerCode &&
        l.lecturerCode.toLowerCase().includes(search.toLowerCase()))
  );

  // chọn data theo tab
  const data = activeTab === "students" ? filteredStudents : filteredLecturers;

  // tính phân trang
  const totalItems = data.length;
  const totalPages = Math.ceil(totalItems / pageSize);
  const currentPageData = data.slice((page - 1) * pageSize, page * pageSize);

  // reset page khi đổi tab hoặc search
  useEffect(() => {
    setPage(1);
  }, [activeTab, search]);

  return (
    <div className="quanlytaikhoan-page">
      <header className="qltk-toolbar">
        <button onClick={() => setShowRegisterStudent(true)}>
          ➕ Thêm tài khoản
        </button>
        <button onClick={() => alert("Import Excel")}>📂 Import Excel</button>
        <input
          type="text"
          placeholder="🔍 Tìm kiếm..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
        />
      </header>

      <div className="qltk-tabs">
        <button
          className={activeTab === "students" ? "active" : ""}
          onClick={() => setActiveTab("students")}
        >
          Sinh viên
        </button>
        <button
          className={activeTab === "lecturers" ? "active" : ""}
          onClick={() => setActiveTab("lecturers")}
        >
          Giảng viên
        </button>
      </div>

      {loading && <p>Đang tải dữ liệu sinh viên...</p>}
      {error && <p style={{ color: "red" }}>{error}</p>}

      <div className="qltk-table-box">
        {currentPageData.length > 0 ? (
          <table>
            <thead>
              <tr>
                {activeTab === "students" ? (
                  <>
                    <th>Mã SV</th>
                    <th>Họ tên</th>
                    <th>Email</th>
                    <th>Ngành</th>
                    <th>GPA</th>
                    <th>Hành động</th>
                  </>
                ) : (
                  <>
                    <th>Mã GV</th>
                    <th>Họ tên</th>
                    <th>Email</th>
                    <th>Khoa</th>
                    <th>Điện thoại</th>
                    <th>Hành động</th>
                  </>
                )}
              </tr>
            </thead>
            <tbody>
              {currentPageData.map((item) =>
                activeTab === "students" ? (
                  <tr key={item.studentId}>
                    <td>{item.studentCode}</td>
                    <td>{item.fullName}</td>
                    <td>{item.email}</td>
                    <td>{item.major}</td>
                    <td>{item.gpa}</td>
                    <td>
                      <button onClick={() => alert(`Xem ${item.fullName}`)}>
                        👁️ Xem
                      </button>
                      <button onClick={() => alert(`Sửa ${item.fullName}`)}>
                        ✏️ Sửa
                      </button>
                      <button onClick={() => alert(`Xóa ${item.fullName}`)}>
                        🗑️ Xóa
                      </button>
                    </td>
                  </tr>
                ) : (
                  <tr key={item.lecturerId}>
                    <td>{item.lecturerCode}</td>
                    <td>{item.fullName}</td>
                    <td>{item.email}</td>
                    <td>{item.faculty}</td>
                    <td>{item.phone}</td>
                    <td>
                      <button onClick={() => alert(`Xem ${item.fullName}`)}>
                        👁️ Xem
                      </button>
                      <button onClick={() => alert(`Sửa ${item.fullName}`)}>
                        ✏️ Sửa
                      </button>
                      <button onClick={() => alert(`Xóa ${item.fullName}`)}>
                        🗑️ Xóa
                      </button>
                    </td>
                  </tr>
                )
              )}
            </tbody>
          </table>
        ) : (
          <div className="empty-state">
            <div className="empty-icon">
              {activeTab === "students" ? "👥" : "👨‍🏫"}
            </div>
            <h3>
              {activeTab === "students"
                ? "Không có sinh viên nào"
                : "Không có giảng viên nào"}
            </h3>
            <p>
              {search
                ? `Không tìm thấy ${
                    activeTab === "students" ? "sinh viên" : "giảng viên"
                  } nào với từ khóa "${search}"`
                : `Chưa có dữ liệu ${
                    activeTab === "students" ? "sinh viên" : "giảng viên"
                  } trong hệ thống`}
            </p>
          </div>
        )}

        {/* Phân trang */}
        {totalPages > 1 && (
          <div className="pagination">
            <button onClick={() => setPage(1)} disabled={page === 1}>
              {"<<"}
            </button>
            <button onClick={() => setPage((p) => p - 1)} disabled={page === 1}>
              Trước
            </button>
            <span>
              Trang {page} / {totalPages}
            </span>
            <button
              onClick={() => setPage((p) => p + 1)}
              disabled={page === totalPages}
            >
              Sau
            </button>
            <button
              onClick={() => setPage(totalPages)}
              disabled={page === totalPages}
            >
              {">>"}
            </button>

            <select
              value={pageSize}
              onChange={(e) => {
                setPageSize(Number(e.target.value));
                setPage(1);
              }}
            >
              {[5, 10, 20, 50].map((size) => (
                <option key={size} value={size}>
                  Hiển thị {size}
                </option>
              ))}
            </select>
          </div>
        )}
      </div>
      <RegisterStudent
        show={showRegisterStudent}
        setShow={setShowRegisterStudent}
      />
    </div>
  );
};

export default QuanLyTaiKhoan;

```

### src\pages\admin\QuanLyTaiKhoan\RegisterStudent\RegisterStudent.jsx
```jsx
import React, { useState } from "react";
import { Button, Modal, Form } from "react-bootstrap";
import { useDispatch, useSelector } from "react-redux";
import {
  registerStudent,
  selectAuthLoading,
} from "../../../../store/authSlice";

const RegisterStudent = ({ show, setShow }) => {
  const dispatch = useDispatch();
  const loading = useSelector(selectAuthLoading);

  const initialForm = {
    email: "",
    password: "",
    fullName: "",
    studentCode: "",
    faculty: "",
    major: "",
    phone: "",
    capstoneType: "",
    gpa: "",
  };

  const [formData, setFormData] = useState(initialForm);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const res = await dispatch(registerStudent(formData)).unwrap();
      // unwrap sẽ throw error nếu action bị reject

      if (res?.success) {
        alert("Đăng ký thành công");
        setFormData(initialForm);
        setShow(false); // chỉ đóng khi thành công
      } else {
        console.error("Đăng ký thất bại:", res?.message);
        alert("Đăng ký thất bại" + res?.message);
      }
    } catch (err) {
      alert("Lỗi khi đăng ký: " + err);
      console.log(formData);
    }
  };

  const handleClose = () => {
    setFormData(initialForm); // reset form khi đóng modal
    setShow(false);
  };

  return (
    <Modal show={show} onHide={handleClose} size="lg" centered>
      <Modal.Header closeButton>
        <Modal.Title>Đăng ký sinh viên</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <Form onSubmit={handleSubmit}>
          <Form.Group className="mb-3">
            <Form.Label>Email</Form.Label>
            <Form.Control
              type="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              autoComplete="off"
              required
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Mật khẩu</Form.Label>
            <Form.Control
              type="password"
              name="password"
              value={formData.password}
              onChange={handleChange}
              autoComplete="new-password"
              required
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Mã sinh viên</Form.Label>
            <Form.Control
              type="text"
              name="studentCode"
              value={formData.studentCode}
              onChange={handleChange}
              required
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Họ tên</Form.Label>
            <Form.Control
              type="text"
              name="fullName"
              value={formData.fullName}
              onChange={handleChange}
              required
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Khoa</Form.Label>
            <Form.Control
              type="text"
              name="faculty"
              value={formData.faculty}
              onChange={handleChange}
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Chuyên ngành</Form.Label>
            <Form.Control
              type="text"
              name="major"
              value={formData.major}
              onChange={handleChange}
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Điện thoại</Form.Label>
            <Form.Control
              type="tel"
              name="phone"
              value={formData.phone}
              onChange={handleChange}
              pattern="[0-9]{10,11}"
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Capstone Type</Form.Label>
            <Form.Select
              name="capstoneType"
              value={formData.capstoneType}
              onChange={handleChange}
            >
              <option value="">-- Chọn Capstone --</option>
              <option value="1">Capstone 1</option>
              <option value="2">Capstone 2</option>
            </Form.Select>
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>GPA</Form.Label>
            <Form.Control
              type="number"
              name="gpa"
              value={formData.gpa}
              onChange={handleChange}
              step="0.01"
              min="0"
              max="4"
            />
          </Form.Group>
        </Form>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="secondary" onClick={handleClose}>
          Hủy
        </Button>
        <Button
          variant="primary"
          onClick={handleSubmit}
          disabled={loading}
          type="submit"
        >
          {loading ? "Đang đăng ký..." : "Đăng ký"}
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default RegisterStudent;

```

### src\pages\admin\TongQuan\TongQuan.jsx
```jsx
import React, { useEffect, useState } from "react";
import "./TongQuan.scss";
import file from "../../../assets/image/file.png";
import time from "../../../assets/image/time.png";
import what from "../../../assets/image/what.png";
import { getAllLecturersAPI } from "../../../services/LecturersAPI";
import { getAllStudentsAPI } from "../../../services/StudentsAPI";
import { getAllTeamsAPI } from "../../../services/TeamsAPI";

// import chart
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from "recharts";

const COLORS = [
  "#0088FE",
  "#00C49F",
  "#FFBB28",
  "#FF8042",
  "#B84FFF",
  "#FF4FC3",
];

const TongQuan = () => {
  const [stats, setStats] = useState({
    lecturers: 0,
    students: 0,
    teamsCap1: 0,
    teamsCap1WithMentor: 0,
    teamsCap2: 0,
    teamsCap2WithMentor: 0,
  });

  const [studentByMajor, setStudentByMajor] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [lecturersRes, studentsRes, teamsCap1Res, teamsCap2Res] =
          await Promise.all([
            getAllLecturersAPI(),
            getAllStudentsAPI(),
            getAllTeamsAPI(1),
            getAllTeamsAPI(2),
          ]);

        const students = studentsRes.data || [];
        const teamsCap1 = teamsCap1Res.data || [];
        const teamsCap2 = teamsCap2Res.data || [];

        // group students by major
        const grouped = students.reduce((acc, s) => {
          const major = s.major || "Khác";
          acc[major] = (acc[major] || 0) + 1;
          return acc;
        }, {});
        const majorData = Object.entries(grouped).map(([name, value]) => ({
          name,
          value,
        }));

        setStudentByMajor(majorData);

        setStats({
          lecturers: lecturersRes.data?.length || 0,
          students: students.length,
          teamsCap1: teamsCap1.length,
          teamsCap1WithMentor: teamsCap1.filter((t) => t.mentorId).length,
          teamsCap2: teamsCap2.length,
          teamsCap2WithMentor: teamsCap2.filter((t) => t.mentorId).length,
        });
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    fetchData();
  }, []);

  return (
    <div className="tongquan-page">
      <div className="tq-stats">
        {/* các card cũ */}
        <div className="tq-stat-card">
          <div className="tq-icon">
            <img src={what} alt="students" />
          </div>
          <div className="tq-info">
            <div className="tq-stat-title">Tổng sinh viên</div>
            <div className="tq-stat-value">{stats.students}</div>
          </div>
        </div>

        <div className="tq-stat-card">
          <div className="tq-icon">
            <img src={time} alt="teams" />
          </div>
          <div className="tq-info">
            <div className="tq-stat-title">Tổng nhóm (Cap1)</div>
            <div className="tq-stat-value">{stats.teamsCap1}</div>
            <div className="tq-stat-sub">
              {stats.teamsCap1WithMentor} có mentor ·{" "}
              {stats.teamsCap1 - stats.teamsCap1WithMentor} chưa
            </div>
          </div>
        </div>

        <div className="tq-stat-card">
          <div className="tq-icon">
            <img src={file} alt="teams" />
          </div>
          <div className="tq-info">
            <div className="tq-stat-title">Tổng nhóm (Cap2)</div>
            <div className="tq-stat-value">{stats.teamsCap2}</div>
            <div className="tq-stat-sub">
              {stats.teamsCap2WithMentor} có mentor ·{" "}
              {stats.teamsCap2 - stats.teamsCap2WithMentor} chưa
            </div>
          </div>
        </div>

        <div className="tq-stat-card">
          <div className="tq-icon">
            <img src={what} alt="lecturers" />
          </div>
          <div className="tq-info">
            <div className="tq-stat-title">Giảng viên</div>
            <div className="tq-stat-value">{stats.lecturers}</div>
          </div>
        </div>
      </div>

      {/* Biểu đồ tròn thống kê sinh viên theo ngành */}
      <div className="tq-chart">
        <h3>Thống kê sinh viên theo ngành</h3>
        <ResponsiveContainer width="100%" height={300}>
          <PieChart>
            <Pie
              data={studentByMajor}
              dataKey="value"
              nameKey="name"
              cx="50%"
              cy="50%"
              outerRadius={100}
              fill="#8884d8"
              label
            >
              {studentByMajor.map((entry, index) => (
                <Cell
                  key={`cell-${index}`}
                  fill={COLORS[index % COLORS.length]}
                />
              ))}
            </Pie>
            <Tooltip />
            <Legend />
          </PieChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
};

export default TongQuan;

```

### src\pages\ForgotPassword\ConfirmForgot.jsx
```jsx
import React from "react";
import "./ForgotPassword.scss";
import iconReturn from "../../assets/icon/Group 4.png";
import { useNavigate } from "react-router-dom";

const ConfirmForgot = () => {
  const navigate = useNavigate();

  const handleBack = () => {
    // Navigate back to login (e.g., using React Router or parent component)
    navigate("/verification-code");
  };

  return (
    <div className="forgot-password-container">
      <div className="forgot-password-content">
        <button className="back-button" onClick={handleBack}>
          <div className="back-icon">
            <img src={iconReturn} alt="" />
          </div>
        </button>

        <h2>Password reset</h2>
        <p>
          Your password has been successfully reset. click confirm to set a new
          password
        </p>
        <button
          type="submit"
          className="reset-button"
          onClick={() => navigate("/")}
        >
          Confirm
        </button>
      </div>
    </div>
  );
};

export default ConfirmForgot;

```

### src\pages\ForgotPassword\ForgotPassword.jsx
```jsx
import React, { useState } from "react";
import "./ForgotPassword.scss";
import iconReturn from "../../assets/icon/Group 4.png";
import { useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import {
  forgetPassword,
  selectAuthLoading,
  selectAuthError,
} from "../../store/authSlice";
const ForgotPassword = () => {
  const [email, setEmail] = useState("");
  const [error, setError] = useState("");
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const loading = useSelector(selectAuthLoading);
  const authError = useSelector(selectAuthError);

  const validateEmail = (val) => {
    // Regex cải thiện: cho phép ký tự đặc biệt, kiểm tra độ dài
    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

    // Kiểm tra độ dài tổng thể
    if (val.length > 254) return false;

    // Kiểm tra local part không bắt đầu/kết thúc bằng dấu chấm
    const localPart = val.split("@")[0];
    if (localPart.startsWith(".") || localPart.endsWith(".")) return false;

    return emailRegex.test(val);
  };

  const handleResetPassword = async (e) => {
    e.preventDefault();

    if (!email) return setError("Please enter your email");

    if (!validateEmail(email))
      return setError("Please enter a valid email address");
    setError("");
    dispatch(forgetPassword({ email }))
      .unwrap()
      .then(() => {
        navigate(`/verification-code?email=${encodeURIComponent(email)}`);
      });
  };

  const handleBack = () => {
    // Navigate back to login (e.g., using React Router or parent component)
    navigate("/");
  };

  return (
    <div className="forgot-password-container">
      <div className="forgot-password-content">
        <button className="back-button" onClick={handleBack}>
          <div className="back-icon">
            <img src={iconReturn} alt="" />
          </div>
        </button>

        <h2>Forgot password</h2>
        <p>Please enter your email to reset the password</p>
        <form onSubmit={handleResetPassword}>
          <div className="form-group">
            <label htmlFor="email">Your Email</label>
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="Enter your email"
              className={error ? "error" : ""}
            />
            {error && <span className="error-message">{error}</span>}
            {!error && authError && (
              <span className="error-message">{authError}</span>
            )}
          </div>
          <button type="submit" className="reset-button" disabled={loading}>
            {loading ? (
              <div className="spinner-reset-button"></div>
            ) : (
              "Reset Password"
            )}
          </button>
        </form>
      </div>
    </div>
  );
};

export default ForgotPassword;

```

### src\pages\ForgotPassword\VerificationCode.jsx
```jsx
import React, { useState, useEffect } from "react";
import "./VerificationCode.scss";
import iconReturn from "../../assets/icon/Group 4.png";
import { useNavigate, useLocation } from "react-router-dom";
// import { resetPasswordAPI } from "../../services/AuthAPI";
import { useDispatch, useSelector } from "react-redux";
import {
  resetPassword,
  // selectAuthError,
  selectAuthLoading,
} from "../../store/authSlice";

const VerificationCode = () => {
  // Các state phải khai báo TRƯỚC các hàm sử dụng chúng
  const [email, setEmail] = useState("");
  const [resetCode, setResetCode] = useState(""); // Đảm bảo dòng này có mặt!
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [error, setError] = useState("");
  // const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const location = useLocation();
  const dispatch = useDispatch();
  const loading = useSelector(selectAuthLoading);
  // const authError = useSelector(selectAuthError);

  // Lấy email từ URL params khi component mount
  useEffect(() => {
    const urlParams = new URLSearchParams(location.search);
    const emailFromUrl = urlParams.get("email");
    if (emailFromUrl) {
      setEmail(decodeURIComponent(emailFromUrl));
    }
  }, [location.search]);

  // === Handle submit ===
  const handleResetPassword = async (e) => {
    e.preventDefault();

    // Trim để tránh space thừa
    const trimmedEmail = email.trim();
    const trimmedResetCode = resetCode.trim();
    const trimmedNewPassword = newPassword.trim();
    const trimmedConfirmPassword = confirmPassword.trim();

    // Validate
    if (
      !trimmedEmail ||
      !trimmedResetCode ||
      !trimmedNewPassword ||
      !trimmedConfirmPassword
    ) {
      setError("Vui lòng nhập đầy đủ thông tin");
      return;
    }
    if (!/^\d{6}$/.test(trimmedResetCode)) {
      setError("Mã xác minh phải gồm đúng 6 số");
      return;
    }
    if (trimmedNewPassword.length < 6) {
      // Thêm validate độ dài password (tùy chọn)
      setError("Mật khẩu mới phải ít nhất 6 ký tự");
      return;
    }
    if (trimmedNewPassword !== trimmedConfirmPassword) {
      setError("Mật khẩu xác nhận không khớp");
      return;
    }

    setError("");
    // setLoading(true);

    try {
      // Gọi API với các biến đã trim
      dispatch(
        resetPassword({
          email: trimmedEmail,
          resetCode: trimmedResetCode,
          newPassword: trimmedNewPassword,
          confirmPassword: trimmedConfirmPassword,
        })
      )
        .unwrap()
        .then(() => {
          navigate("/confirm-forgot");
        });
    } catch (err) {
      console.error("Lỗi API:", err); // Log để debug
      setError(err.message || "Không thể kết nối tới server");
    } finally {
      // setError("Mật khẩu mới phải khác mật khẩu trước đó");
    }
  };

  // Hàm xử lý change cho resetCode (tùy chọn: chỉ cho phép số)
  const handleResetCodeChange = (e) => {
    const value = e.target.value.replace(/\D/g, ""); // Chỉ giữ số
    setResetCode(value);
  };

  return (
    <div className="reset-password-container">
      <div className="reset-password-content">
        <button
          className="back-button"
          onClick={() => navigate("/forgot-password")}
        >
          <img src={iconReturn} alt="back" />
        </button>

        <h2>Reset Password</h2>
        <p>Nhập email, mã xác minh 6 số và mật khẩu mới</p>

        <form onSubmit={handleResetPassword}>
          <div className="form-group">
            {/* <label>Email</label> */}
            <input
              type="email"
              placeholder="you@example.com"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className={error && !email.trim() ? "error" : ""}
              disabled={true}
              autoComplete="off"
              autoCorrect="off"
              autoCapitalize="off"
              spellCheck="false"
            />
          </div>

          <div className="form-group">
            <input
              type="text"
              placeholder="Nhập mã"
              value={resetCode}
              maxLength={6}
              onChange={handleResetCodeChange} // Sử dụng hàm mới để chỉ cho phép số
              className={
                error && (!resetCode || !/^\d{6}$/.test(resetCode))
                  ? "error"
                  : ""
              }
              autoComplete="off"
              autoCorrect="off"
              autoCapitalize="off"
              spellCheck="false"
            />
          </div>

          <div className="form-group">
            <input
              type="password"
              placeholder="Nhập mật khẩu mới"
              value={newPassword}
              onChange={(e) => setNewPassword(e.target.value)}
              className={
                error && newPassword !== confirmPassword ? "error" : ""
              }
              autoComplete="new-password"
              autoCorrect="off"
              autoCapitalize="off"
              spellCheck="false"
            />
          </div>

          <div className="form-group">
            <input
              type="password"
              placeholder="Xác nhận mật khẩu"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              className={
                error && newPassword !== confirmPassword ? "error" : ""
              }
              autoComplete="new-password"
              autoCorrect="off"
              autoCapitalize="off"
              spellCheck="false"
            />
          </div>

          {error && <p className="error-message">{error}</p>}

          <button type="submit" className="reset-button" disabled={loading}>
            {loading ? "Đang xử lý..." : "Đổi mật khẩu"}
          </button>
        </form>
      </div>
    </div>
  );
};

export default VerificationCode;

```

### src\pages\Login\Login.jsx
```jsx
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import "./Login.scss";
import { useDispatch, useSelector } from "react-redux";
import {
  login,
  selectAuthLoading,
  selectAuthError,
} from "../../store/authSlice";

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [emailError, setEmailError] = useState("");
  const [passwordError, setPasswordError] = useState("");

  const navigate = useNavigate();
  const dispatch = useDispatch();
  const loading = useSelector(selectAuthLoading);
  const authError = useSelector(selectAuthError);
  const validateEmail = (val) => {
    // Regex cải thiện: cho phép ký tự đặc biệt, kiểm tra độ dài
    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

    // Kiểm tra độ dài tổng thể
    if (val.length > 254) return false;

    // Kiểm tra local part không bắt đầu/kết thúc bằng dấu chấm
    const localPart = val.split("@")[0];
    if (localPart.startsWith(".") || localPart.endsWith(".")) return false;

    return emailRegex.test(val);
  };

  const handleLoginSubmit = async (e) => {
    e.preventDefault();
    setEmailError("");
    setPasswordError("");

    if (!validateEmail(email)) {
      setEmailError("Email format is invalid");
      return;
    }
    if (!password) {
      setPasswordError("Password cannot be empty");
      return;
    }

    dispatch(login({ email, password }))
      .unwrap()
      .then((data) => {
        const type = data.account?.accountType;
        switch (type) {
          case "Admin":
            navigate("/admin");
            break;
          case "Lecturer":
            navigate("/lecturer");
            break;
          case "Student":
            navigate("/student");
            break;
          default:
            navigate("/");
        }
      })
      .catch((err) => {
        setPasswordError(err || "Login failed");
      });
  };

  const handleForgotPassword = () => navigate("/forgot-password");

  return (
    <div className="login-page">
      <div className="login-container">
        <h2 className="login-title">CAPSY SMART DTU</h2>

        <form className="login-form" onSubmit={handleLoginSubmit}>
          <div className="form-group">
            <label htmlFor="email">Your Email</label>
            <input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="contact@disdtech.com"
              className={emailError ? "error" : ""}
            />
            {emailError && <span className="error-message">{emailError}</span>}
          </div>

          <div className="form-group">
            <label htmlFor="password">Password</label>
            <input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className={passwordError ? "error" : ""}
            />
            {passwordError && (
              <span className="error-message">{passwordError}</span>
            )}
            {!passwordError && authError && (
              <span className="error-message">{authError}</span>
            )}

            <button
              type="button"
              className="forgot-password"
              onClick={handleForgotPassword}
            >
              Forgot password?
            </button>
          </div>

          <button type="submit" className="continue-button" disabled={loading}>
            {loading ? "Đang đăng nhập..." : "Continue"}
          </button>
        </form>
      </div>
    </div>
  );
};

export default Login;

```

### src\services\AuthAPI.js
```js
import instance from "../app/instance";

const LoginAPI = async (email, password) => {
  try {
    const response = await instance.post("Auth/login", { email, password });
    return response.data;
  } catch (error) {
    if (error.response) {
      // Server trả về lỗi (4xx, 5xx)
      throw new Error(error.response.data.message || "Server Error");
    } else if (error.request) {
      // Request đã gửi nhưng không nhận được response
      throw new Error("No response from server");
    } else {
      // Lỗi khác
      throw new Error(error.message);
    }
  }
};

const LogoutAPI = async () => {
  try {
    const response = await instance.post("Auth/logout");
    return response.data;
  } catch (error) {
    throw new Error(
      error.response?.data?.message || error.request
        ? "Không nhận được phản hồi từ server"
        : error.message
    );
  }
};

const forgetPasswordAPI = async (email) => {
  try {
    const response = await instance.post("Auth/forget-password", { email });
    return response.data;
  } catch (error) {
    throw new Error(
      error.response?.data?.message || error.request
        ? "Không nhận được phản hồi từ server"
        : error.message
    );
  }
};

const resetPasswordAPI = async (
  email,
  resetCode,
  newPassword,
  confirmPassword
) => {
  try {
    const response = await instance.post("/Auth/reset-password", {
      // Đường dẫn API đúng theo backend
      email,
      resetCode,
      newPassword,
      confirmPassword, // Backend có thể không cần confirmPassword nếu đã validate frontend
    });
    return response.data;
  } catch (error) {
    // Cải thiện error handling
    if (error.response) {
      // Server trả lỗi (4xx, 5xx)
      throw new Error(error.response.data?.message || "Lỗi từ server");
    } else if (error.request) {
      // Không nhận phản hồi
      throw new Error("Không nhận được phản hồi từ server");
    } else {
      // Lỗi khác
      throw new Error(error.message || "Có lỗi xảy ra");
    }
  }
};

//refresh token
const refreshTokenAPI = async ({ token, refreshToken }) => {
  try {
    const response = await instance.post("Auth/refresh", {
      token,
      refreshToken,
    });
    return response.data;
  } catch (error) {
    throw new Error(
      error.response?.data?.message || error.request
        ? "Không nhận được phản hồi từ server"
        : error.message
    );
  }
};

const registerStudentAPI = async (studentData) => {
  if (!studentData) {
    throw new Error("studentData is required");
  }

  const data = {
    email: studentData.email,
    password: studentData.password,
    studentCode: studentData.studentCode,
    fullName: studentData.fullName,
    faculty: studentData.faculty,
    major: studentData.major,
    phone: studentData.phone,
    capstoneType: studentData.capstoneType,
    gpa: studentData.gpa,
  };

  try {
    const response = await instance.post("Auth/register/student", data);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message);
  }
};

export {
  LoginAPI,
  LogoutAPI,
  forgetPasswordAPI,
  resetPasswordAPI,
  refreshTokenAPI,
  registerStudentAPI,
};

```

### src\services\LecturersAPI.js
```js
import instance from "../app/instance";

const getAllLecturersAPI = async () => {
  try {
    const response = await instance.get("/Lecturers/get-lecturers");
    return response.data;
  } catch (error) {
    throw new Error(error.response.data.message || "Server Error");
  }
};

export { getAllLecturersAPI };

```

### src\services\StudentsAPI.js
```js
import instance from "../app/instance";

const getAllStudentsAPI = async () => {
  try {
    const response = await instance.get("/Students/get-students");
    return response.data;
  } catch (error) {
    throw new Error(error.response.data.message || "Server Error");
  }
};
const deleteStudentAPI = async (id) => {
  try {
    const response = await instance.delete(`/Students/insert/${id}`);
    return response.data;
  } catch (error) {
    throw new Error(error.response.data.message || "Server Error");
  }
};

const updateStudentAPI = async (id, studentData) => {
  try {
    const response = await instance.put(
      `/Students/update-student/${id}`,
      studentData
    );
    return response.data;
  } catch (error) {
    throw new Error(error.response.data.message || "Server Error");
  }
};
export { getAllStudentsAPI, deleteStudentAPI, updateStudentAPI };

```

### src\services\TeamsAPI.js
```js
import instance from "../app/instance";

const getAllTeamsAPI = async (capstoneType) => {
  try {
    const response = await instance.get(
      `Teams/by-capstone-type/${capstoneType}`
    );
    return response.data;
  } catch (error) {
    throw new Error(error.response.data.message || "Server Error");
  }
};

// get team by id
const getTeamByIdAPI = async (teamId) => {
  try {
    const response = await instance.get(`Teams/${teamId}`);
    return response.data;
  } catch (error) {
    throw new Error(error.response.data.message || "Server Error");
  }
};

// update team
const updateTeamAPI = async (
  teamId,
  teamName,
  projectTitle,
  teamLeaderId,
  mentorId,
  status
) => {
  try {
    const response = await instance.put(`Teams/update/${teamId}`, {
      teamName,
      projectTitle,
      teamLeaderId,
      mentorId,
      status,
    });

    // Check từ backend
    if (response.data.success != true) {
      throw new Error(response.data.message || "Update failed");
    }

    return response.data;
  } catch (error) {
    console.error("Update team error:", error);

    const msg =
      error.response?.data?.message || error.message || "Server Error";

    throw new Error(msg);
  }
};

export { getAllTeamsAPI, getTeamByIdAPI, updateTeamAPI };

```

### src\store\authReducers.js
```js
import {
  login,
  logoutAsync,
  forgetPassword,
  resetPassword,
  registerStudent,
} from "./authSlice";

export const extraReducers = (builder) => {
  builder
    // case login
    .addCase(login.pending, (state) => {
      state.loading = true;
      state.error = null;
    })
    .addCase(login.fulfilled, (state, action) => {
      state.loading = false;
      state.error = null;
      state.token = action.payload.token;
      state.refreshToken = action.payload.refreshToken;
      state.accountType = action.payload.account?.accountType ?? null;
      state.account = action.payload.account ?? null;
      localStorage.setItem("token", action.payload.token);
      localStorage.setItem("refreshToken", action.payload.refreshToken);
      if (action.payload.account?.accountType) {
        localStorage.setItem("accountType", action.payload.account.accountType);
      }
    })
    .addCase(login.rejected, (state, action) => {
      state.loading = false;
      state.error = action.payload || "Login failed";
    })
    // case logout
    .addCase(logoutAsync.pending, (state) => {
      state.loading = true;
      state.error = null;
    })
    .addCase(logoutAsync.fulfilled, (state) => {
      state.loading = false;
      state.user = null;
      state.token = null;
      state.refreshToken = null;
      state.accountType = null;
      localStorage.removeItem("token");
      localStorage.removeItem("refreshToken");
      localStorage.removeItem("accountType");
    })
    .addCase(logoutAsync.rejected, (state, action) => {
      state.loading = false;
      state.error = action.payload || "Logout failed";
    })
    // case forgetPassword
    .addCase(forgetPassword.pending, (state) => {
      state.loading = true;
      state.error = null;
    })
    .addCase(forgetPassword.fulfilled, (state) => {
      state.loading = false;
      state.error = null;
    })
    .addCase(forgetPassword.rejected, (state, action) => {
      state.loading = false;
      state.error = action.payload || "ForgetPassword failed";
    })
    // case resetPassword
    .addCase(resetPassword.pending, (state) => {
      state.loading = true;
      state.error = null;
    })
    .addCase(resetPassword.fulfilled, (state) => {
      state.loading = false;
      state.error = null;
    })
    .addCase(resetPassword.rejected, (state, action) => {
      state.loading = false;
      state.error = action.payload || "ResetPassword failed";
    })

    // case registerStudent
    .addCase(registerStudent.pending, (state) => {
      state.loading = true;
      state.error = null;
    })
    .addCase(registerStudent.fulfilled, (state) => {
      state.loading = false;
      state.error = null;
    })
    .addCase(registerStudent.rejected, (state, action) => {
      state.loading = false;
      state.error = action.payload || "RegisterStudent failed";
    });
};

```

### src\store\authSlice.js
```js
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  forgetPasswordAPI,
  LoginAPI,
  LogoutAPI,
  registerStudentAPI,
  resetPasswordAPI,
} from "../services/AuthAPI";
import { extraReducers } from "./authReducers";

export const login = createAsyncThunk(
  "auth/login",
  async ({ email, password }, { rejectWithValue }) => {
    try {
      const data = await LoginAPI(email, password);
      return data;
    } catch (error) {
      return rejectWithValue(error.message || "Login failed");
    }
  }
);

export const logoutAsync = createAsyncThunk(
  "auth/logout",
  async (_, { rejectWithValue }) => {
    try {
      await LogoutAPI();
      return true;
    } catch (error) {
      return rejectWithValue(error.message || "Logout failed");
    }
  }
);

export const forgetPassword = createAsyncThunk(
  "auth/forgetPassword",
  async ({ email }, { rejectWithValue }) => {
    try {
      await forgetPasswordAPI(email);
      return true;
    } catch (error) {
      return rejectWithValue(error.message || "ForgetPassword failed");
    }
  }
);

export const resetPassword = createAsyncThunk(
  "auth/resetPassword",
  async (
    { email, resetCode, newPassword, confirmPassword },
    { rejectWithValue }
  ) => {
    try {
      await resetPasswordAPI(email, resetCode, newPassword, confirmPassword);
      return true;
    } catch (error) {
      return rejectWithValue(error.message || "ResetPassword failed");
    }
  }
);

export const registerStudent = createAsyncThunk(
  "auth/registerStudent",
  async (studentData, { rejectWithValue }) => {
    try {
      const res = await registerStudentAPI(studentData);
      return { success: true, message: res.message || "Đăng ký thành công" };
    } catch (error) {
      return rejectWithValue(error.message || "RegisterStudent failed");
    }
  }
);

const initialState = {
  user: null,
  token: null,
  refreshToken: null,
  accountType: null,
  loading: false,
  error: null,
};

const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    logout(state) {
      state.user = null;
      state.token = null;
      state.refreshToken = null;
      state.accountType = null;
      state.error = null;
      localStorage.removeItem("token");
      localStorage.removeItem("refreshToken");
      localStorage.removeItem("accountType");
    },
    restoreSession(state) {
      const token = localStorage.getItem("token");
      const refreshToken = localStorage.getItem("refreshToken");
      const accountType = localStorage.getItem("accountType");
      if (token) {
        state.token = token;
      }
      if (refreshToken) {
        state.refreshToken = refreshToken;
      }
      if (accountType) {
        state.accountType = accountType;
      }
    },
  },
  extraReducers: extraReducers,
});

export const { logout, restoreSession } = authSlice.actions;

export const selectAuth = (state) => state.auth;
export const selectAuthLoading = (state) => state.auth.loading;
export const selectAuthError = (state) => state.auth.error;
export const selectAuthToken = (state) => state.auth.token;
export const selectAccountType = (state) => state.auth.accountType;
export const selectCurrentUser = (state) => state.auth.user;

export default authSlice.reducer;

```

### src\store\store.js
```js
import { configureStore } from "@reduxjs/toolkit";
import authReducer from "./authSlice";
import studentReducer from "./studentSlice";

export const store = configureStore({
  reducer: {
    auth: authReducer,
    students: studentReducer,
  },
});

export default store;

```

### src\store\studentSlice.js
```js
// src/redux/slices/StudentSlice.js
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { getAllStudentsAPI } from "../services/StudentsAPI";

// Async thunk để fetch sinh viên từ API
export const fetchStudents = createAsyncThunk(
  "students/fetchStudents",
  async (_, { rejectWithValue }) => {
    try {
      const res = await getAllStudentsAPI();
      return res.data; // giả sử API trả về { data: [...] }
    } catch (err) {
      return rejectWithValue(
        err.response?.data?.message || "Không thể tải danh sách sinh viên"
      );
    }
  }
);

const studentSlice = createSlice({
  name: "students",
  initialState: {
    data: [],
    loading: false,
    error: null,
  },
  reducers: {
    clearStudents: (state) => {
      state.data = [];
      state.loading = false;
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    builder
      // fetchStudents pending
      .addCase(fetchStudents.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      // fetchStudents thành công
      .addCase(fetchStudents.fulfilled, (state, action) => {
        state.loading = false;
        state.data = action.payload || [];
      })
      // fetchStudents thất bại
      .addCase(fetchStudents.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || "Lỗi không xác định";
      });
  },
});

export const { clearStudents } = studentSlice.actions;
export default studentSlice.reducer;

```
